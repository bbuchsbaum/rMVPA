[{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"standard Representational Similarity Analysis (RSA) compares neural patterns model-based similarity structures, cases specialized approaches needed. rMVPA package provides two advanced RSA methods: Feature-Based RSA: Projects neural patterns predefined feature space Vector-Based RSA: Directly compares vectorized distance matrices vignette explains use specialized approaches instead standard RSA.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"overview","dir":"Articles","previous_headings":"Feature-Based RSA","what":"Overview","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"Feature-Based RSA designed cases : rich feature space describing stimuli want directly map neural patterns features ’re interested reconstructing stimulus features neural patterns Unlike standard RSA compares similarity matrices, Feature-Based RSA attempts find mapping neural patterns feature space.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"key-differences-from-standard-rsa","dir":"Articles","previous_headings":"Feature-Based RSA","what":"Key Differences from Standard RSA","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"Standard RSA: Compares similarity structures Feature RSA: Maps neural patterns feature dimensions Standard RSA: Correlation/regression coefficients RDMs Feature RSA: Predicted feature values stimulus Standard RSA: Testing theoretical models representation Feature RSA: Reconstructing stimulus features brain activity","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"implementation-example","dir":"Articles","previous_headings":"Feature-Based RSA","what":"Implementation Example","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"Let’s walk complete example:","code":"# Generate a synthetic dataset with dimensions 6x6x6, 50 observations, divided into 4 blocks # This ensures that the number of trials matches the number of stimuli used below data_out <- rMVPA::gen_sample_dataset(D = c(6,6,6), nobs = 50, blocks = 4, nlevels = 2) print(data_out) ## $dataset ##  ##  █▀▀ MVPA Dataset ▀▀█  ##  ## ├─ Training Data  ## │  ├─ Dimensions:  6 × 6 × 6 × 50 observations  ## │  └─ Type:  DenseNeuroVec  ## ├─ Test Data  ## │  └─  None  ## └─ Mask Information  ##    ├─ Areas:  1 : 120  ##    └─ Active voxels/vertices:  120  ##  ##  ## $design ##  ##  █▀▀ MVPA Design ▀▀█  ##  ## ├─ Training Data  ## │  ├─ Observations:  50  ## │  ├─ Response Type:  Factor ## │  ├─ Levels:  a, b  ## │  └─ Class Distribution:  a: 25, b: 25  ## ├─ Test Data  ## │  └─  None  ## └─ Structure  ##    ├─ Blocking:  Present ##    ├─ Number of Blocks:  4  ##    ├─ Mean Block Size:  12  (SD:  0.58 )  ##    └─ Split Groups:  None # Generate synthetic feature space (e.g., visual features of stimuli) set.seed(123) n_stimuli <- 50 n_features <- 5  # Create feature matrix (stimuli × features) feature_matrix <- matrix(rnorm(n_stimuli * n_features), n_stimuli, n_features) colnames(feature_matrix) <- paste0(\"feature_\", 1:n_features)  # Create stimulus labels stim_labels <- paste0(\"stim_\", 1:n_stimuli)  # Create feature RSA design feature_design <- feature_rsa_design(   F = feature_matrix,  # Direct feature matrix   labels = stim_labels )  # Create MVPA dataset from the generated data dset <- mvpa_dataset(data_out$dataset$train_data, mask = data_out$dataset$mask)  # Create cross-validation structure using the block information crossval <- blocked_cross_validation(data_out$design$block_var)  # Create feature RSA model feature_model <- feature_rsa_model(   dataset = dset,   design = feature_design,   method = \"scca\",  # Sparse Canonical Correlation Analysis   crossval = crossval  # Add cross-validation )  # Create proper region mask from the dataset's mask mask_vol <- data_out$dataset$mask nvox <- sum(mask_vol) region_mask <- neuroim2::NeuroVol(   sample(1:3, size = nvox, replace = TRUE),  # 3 regions   space(mask_vol),   indices = which(mask_vol > 0) )  # Run regional analysis results <- run_regional(feature_model, region_mask) ## Error in value[[3L]](cond) :  ##   SCCA error: there is no package called 'whitening' ## Error in value[[3L]](cond) :  ##   SCCA error: there is no package called 'whitening' ## Error in value[[3L]](cond) :  ##   SCCA error: there is no package called 'whitening' ## INFO [2025-03-20 21:30:40]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## Warning: Performance matrix is empty or invalid. Returning empty results. # Examine results print(results$performance_table) ## # A tibble: 3 × 1 ##   roinum ##    <int> ## 1      1 ## 2      2 ## 3      3"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"available-methods","dir":"Articles","previous_headings":"Feature-Based RSA","what":"Available Methods","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"Feature-Based RSA supports multiple analysis methods: Finds canonical correlations neural patterns features Useful features may correlated Projects data maximize covariance features Good high-dimensional feature spaces Reduces neural patterns via PCA predicts features Useful high-dimensional neural data","code":"# Compare different methods methods <- c(\"scca\", \"pca\") ## pls is not implemented yet results_list <- lapply(methods, function(method) {   model <- feature_rsa_model(     dataset = dset,     design = feature_design,     method = method,     crossval = crossval  # Add cross-validation   )   run_regional(model, region_mask) }) ## Error in value[[3L]](cond) :  ##   SCCA error: there is no package called 'whitening' ## Error in value[[3L]](cond) :  ##   SCCA error: there is no package called 'whitening' ## Error in value[[3L]](cond) :  ##   SCCA error: there is no package called 'whitening' ## INFO [2025-03-20 21:30:41]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## Warning: Performance matrix is empty or invalid. Returning empty results. ## INFO [2025-03-20 21:30:42]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 # Compare performance for (i in seq_along(methods)) {   cat(\"\\nMethod:\", methods[i], \"\\n\")   print(results_list[[i]]$performance_table) } ##  ## Method: scca  ## # A tibble: 3 × 1 ##   roinum ##    <int> ## 1      1 ## 2      2 ## 3      3 ##  ## Method: pca  ## # A tibble: 3 × 6 ##   roinum mean_correlation spatial_specificity voxel_correlation   mse r_squared ##    <int>            <dbl>               <dbl>             <dbl> <dbl>     <dbl> ## 1      1          -0.0652             -0.0656          -0.00515  1.13    -0.183 ## 2      2          -0.109              -0.112           -0.0593   1.18    -0.215 ## 3      3          -0.0693             -0.0687          -0.00189  1.18    -0.184"},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"overview-1","dir":"Articles","previous_headings":"Vector-Based RSA","what":"Overview","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"Vector-Based RSA designed cases : pre-computed distance matrices want compare across-block distances need efficient computation large datasets Unlike standard RSA works full similarity matrices, Vector-Based RSA operates vectorized distance matrices can efficiently handle block structure.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"key-differences-from-standard-rsa-1","dir":"Articles","previous_headings":"Vector-Based RSA","what":"Key Differences from Standard RSA","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"Standard RSA: Works full similarity matrices Vector RSA: Works vectorized distances Standard RSA: Manual block exclusion Vector RSA: Built-efficient block handling Standard RSA: Stores full matrices Vector RSA: Stores necessary comparisons","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"implementation-example-1","dir":"Articles","previous_headings":"Vector-Based RSA","what":"Implementation Example","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"","code":"# Create distance matrix for stimuli stim_distances <- as.matrix(dist(feature_matrix)) rownames(stim_distances) <- stim_labels  # Create block structure (e.g., runs) blocks <- rep(1:5, length.out = n_stimuli)  # Create vector RSA design vector_design <- vector_rsa_design(     D = stim_distances,     labels = stim_labels,     block_var = blocks )  # Create vector RSA model vector_model <- vector_rsa_model(   dataset = dset,   design = vector_design,   distfun = cordist(),  # Correlation distance   rsa_simfun = \"pearson\" )  # Run analysis results_vector <- run_regional(vector_model, region_mask) ## INFO [2025-03-20 21:30:43]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 # Examine results print(results_vector$performance_table) ## # A tibble: 0 × 0"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"efficient-block-handling","dir":"Articles","previous_headings":"Vector-Based RSA","what":"Efficient Block Handling","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"Vector-Based RSA automatically handles block structure:","code":"# Compare with different block structures block_sizes <- c(5, 10) results_blocks <- lapply(block_sizes, function(size) {   blocks <- rep(1:(n_stimuli/size), each = size)   design <- vector_rsa_design(     D = stim_distances,     labels = stim_labels,     block_var = blocks   )   model <- vector_rsa_model(     dataset = dset,     design = design,     distfun = cordist()   )   run_regional(model, region_mask) }) ## INFO [2025-03-20 21:30:43]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## INFO [2025-03-20 21:30:44]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 # Compare results for (i in seq_along(block_sizes)) {   cat(\"\\nBlock size:\", block_sizes[i], \"\\n\")   print(results_blocks[[i]]$performance_table) } ##  ## Block size: 5  ## # A tibble: 0 × 0 ##  ## Block size: 10  ## # A tibble: 0 × 0"},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"feature-based-rsa-1","dir":"Articles","previous_headings":"When to Use Each Method","what":"Feature-Based RSA","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"Feature-Based RSA appropriate working well-defined feature space dimensions meaningful interpretations. approach excels reconstructing predicting specific stimulus features neural activity patterns. Common applications include predicting visual features visual cortex responses, reconstructing semantic dimensions language area activity, mapping motion parameters MT/V5 activation patterns.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"vector-based-rsa-1","dir":"Articles","previous_headings":"When to Use Each Method","what":"Vector-Based RSA","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"Vector-Based RSA ideal analyzing large datasets pre-computed distance matrices. handles memory efficiently provides sophisticated block handling capabilities. makes particularly valuable comparing across multiple experimental runs, working high-resolution fMRI data, analyzing large-scale similarity structures.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"standard-rsa","dir":"Articles","previous_headings":"When to Use Each Method","what":"Standard RSA","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"Stick standard RSA : - ’re testing theoretical models - want compare similarity structures - Block structure isn’t critical - Memory usage isn’t concern","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Advanced_RSA.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Advanced RSA Methods: Feature-Based and Vector-Based Approaches","text":"rMVPA package provides three complementary RSA approaches: Standard RSA: General-purpose similarity analysis Feature-Based RSA: Direct feature mapping reconstruction Vector-Based RSA: Efficient similarity comparison block handling choice RSA method align research goals, match data’s structure, fit within computational constraints, reflect whether ’re analyzing feature spaces similarity patterns. implementation details, refer : - feature_rsa_model.R - vector_rsa_model.R - rsa_model.R","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"MVPA Searchlight Tutorial","text":"tutorial explains run searchlight-based Multivariate Pattern Analysis (MVPA) using MVPA_Searchlight.R. script performs local classification regression analysis fMRI data iterating voxel (node surface data) extracting information surrounding neighborhood.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"key-features","dir":"Articles","previous_headings":"Introduction","what":"Key Features:","title":"MVPA Searchlight Tutorial","text":"script handles volumetric (NIfTI) surface-based neuroimaging data. leverages parallel processing across multiple cores faster computation. can choose various classifiers regressors like rf, sda_notune, corsim. analysis generates reproducible outputs including config files metric maps. Cross-validation options include blocked stratified approaches. Data can optionally normalized centering scaling. script supports different feature selection methods works seamlessly volumetric surface-based analyses.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"basic-usage","dir":"Articles","previous_headings":"Running the Script","what":"1. Basic Usage","title":"MVPA Searchlight Tutorial","text":": 4D fMRI file training: train_data.nii trial--trial design matrix: train_design.txt brain mask file: mask.nii can run script command line:","code":"MVPA_Searchlight.R --radius=6 \\                            --train_design=train_design.txt \\                            --train_data=train_data.nii \\                            --mask=mask.nii \\                            --model=sda_notune \\                            --label_column=condition \\                            --ncores=4 \\                            --output=my_searchlight_output"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"understanding-data-modes","dir":"Articles","previous_headings":"Running the Script","what":"2. Understanding Data Modes","title":"MVPA Searchlight Tutorial","text":"script supports two primary data modes:","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"image-mode-volumetric-data","dir":"Articles","previous_headings":"Running the Script > 2. Understanding Data Modes","what":"Image Mode (Volumetric Data)","title":"MVPA Searchlight Tutorial","text":"Default mode (--data_mode=image) Works NIfTI format files Requires binary mask file Processes voxel-wise data 3D space","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"surface-mode","dir":"Articles","previous_headings":"Running the Script > 2. Understanding Data Modes","what":"Surface Mode","title":"MVPA Searchlight Tutorial","text":"Activated --data_mode=surface Works surface-based neuroimaging data Can handle multiple surface sections Processes data cortical surface meshes","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"available-models","dir":"Articles","previous_headings":"Running the Script","what":"3. Available Models","title":"MVPA Searchlight Tutorial","text":"script supports various classification regression models:","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"built-in-mvpa-models","dir":"Articles","previous_headings":"Running the Script > 3. Available Models","what":"Built-in MVPA Models:","title":"MVPA Searchlight Tutorial","text":"corclass: Correlation-based classifier template matching sda_notune: Simple Shrinkage Discriminant Analysis without tuning sda_boot: SDA bootstrap resampling glmnet_opt: Elastic net EPSGO parameter optimization sparse_sda: SDA sparsity constraints sda_ranking: SDA automatic feature ranking mgsda: Multi-Group Sparse Discriminant Analysis lda_thomaz: Modified LDA high-dimensional data hdrda: High-Dimensional Regularized Discriminant Analysis","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"caret-models","dir":"Articles","previous_headings":"Running the Script > 3. Available Models","what":"Caret Models:","title":"MVPA Searchlight Tutorial","text":"model available caret package (e.g., rf, svmRadial, glmnet)","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"cross-validation-options","dir":"Articles","previous_headings":"Running the Script","what":"4. Cross-Validation Options","title":"MVPA Searchlight Tutorial","text":"script supports multiple cross-validation strategies:","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"blocked-cross-validation","dir":"Articles","previous_headings":"Running the Script > 4. Cross-Validation Options","what":"Blocked Cross-Validation","title":"MVPA Searchlight Tutorial","text":"Uses blocking variable (e.g., session) cross-validation splits.","code":"--block_column=session"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"k-fold-cross-validation","dir":"Articles","previous_headings":"Running the Script > 4. Cross-Validation Options","what":"K-Fold Cross-Validation","title":"MVPA Searchlight Tutorial","text":"Default block column specified. Uses random splits.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"two-fold-cross-validation","dir":"Articles","previous_headings":"Running the Script > 4. Cross-Validation Options","what":"Two-Fold Cross-Validation","title":"MVPA Searchlight Tutorial","text":"Specify configuration file:","code":"cross_validation:   name: \"twofold\"   nreps: 10"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"advanced-cross-validation-methods","dir":"Articles","previous_headings":"Running the Script > 4. Cross-Validation Options","what":"Advanced Cross-Validation Methods","title":"MVPA Searchlight Tutorial","text":"addition standard options , several advanced cross-validation strategies available: Blocked Cross-Validation: Divides dataset based blocking variable (e.g., session) samples block remain together. K-Fold Cross-Validation: Randomly partitions data k folds, providing robust estimate model performance. Bootstrap Blocked Cross-Validation: Generates bootstrap resamples within blocks assess model stability heterogeneous datasets. Sequential Blocked Cross-Validation: Assigns sequential folds within block, preserving temporal ordered structures. Custom Cross-Validation: Allows define custom training testing splits standard methods fit experimental design. Specify desired method configuration file setting name field cross_validation. example, use bootstrap blocked cross-validation: Choose method best aligns data structure experimental design.","code":"cross_validation:   name: \"bootstrap\"   # Options: \"twofold\", \"bootstrap\", \"sequential\", \"custom\", \"kfold\"   nreps: 10"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"feature-selection","dir":"Articles","previous_headings":"Running the Script","what":"5. Feature Selection","title":"MVPA Searchlight Tutorial","text":"Enable feature selection --feature_selector parameter:","code":"feature_selector:   method: \"anova\"  # or \"correlation\", \"t-test\", etc.   cutoff_type: \"percentile\"   cutoff_value: 0.1"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"understanding-label_column","dir":"Articles","previous_headings":"Running the Script","what":"6. Understanding label_column","title":"MVPA Searchlight Tutorial","text":"label column critical specifies target variable classification regression. performing classification, column contain categorical labels (e.g., \"Face\" vs. \"House\"). performing regression, column contain continuous values (e.g., reaction times, confidence ratings). Example Design File (train_design.txt):","code":"trial  condition  subject  session 1      Face       S01      1 2      House      S01      1 3      Face       S01      1 4      House      S01      1 5      Face       S01      2"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"using-a-configuration-file","dir":"Articles","previous_headings":"Running the Script","what":"7. Using a Configuration File","title":"MVPA Searchlight Tutorial","text":"Instead specifying options command line, can use YAML R script configuration file. Example YAML Config File (config.yaml): Running Config File:","code":"# Data Sources train_design: \"train_design.txt\" test_design: \"test_design.txt\" train_data: \"train_data.nii\" test_data: \"test_data.nii\" mask: \"mask.nii\"  # Analysis Parameters model: \"rf\"  # Random Forest classifier data_mode: \"image\"  # or \"surface\" ncores: 4 radius: 6 label_column: \"condition\" block_column: \"session\"  # Output Options output: \"searchlight_results\" normalize_samples: TRUE class_metrics: TRUE  # Advanced Options feature_selector:   method: \"anova\"   cutoff_type: \"percentile\"   cutoff_value: 0.1  cross_validation:   name: \"twofold\"   nreps: 10  # Optional Subsetting train_subset: \"subject == 'S01'\" test_subset: \"subject == 'S02'\" Rscript MVPA_Searchlight.R --config=config.yaml"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"expected-outputs","dir":"Articles","previous_headings":"Running the Script","what":"8. Expected Outputs","title":"MVPA Searchlight Tutorial","text":"running script, output directory (searchlight_results/) contains: accuracy.nii: Overall classification accuracy map auc.nii: Area Curve (AUC) performance map auc_class1.nii, auc_class2.nii, etc.: Per-class AUC maps prob_observed.nii: Probabilities observed classes prob_predicted.nii: Probabilities predicted classes config.yaml: Complete record analysis parameters reproducibility Example directory structure: exact files depend : - Whether ’s binary multiclass classification - class_metrics: TRUE set - type analysis (classification vs regression) - model type used regression analyses, ’ll see different metrics: - r2.nii: R-squared values - rmse.nii: Root Mean Square Error - spearcor.nii: Spearman correlation","code":"searchlight_results/ ├── accuracy.nii          # Overall classification accuracy ├── auc.nii              # Mean AUC across classes ├── auc_class1.nii       # AUC for class 1 (if class_metrics: TRUE) ├── auc_class2.nii       # AUC for class 2 (if class_metrics: TRUE) ├── prob_observed.nii    # Probabilities for observed classes ├── prob_predicted.nii   # Probabilities for predicted classes └── config.yaml          # Analysis configuration"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"performance-considerations","dir":"Articles","previous_headings":"Running the Script","what":"9. Performance Considerations","title":"MVPA Searchlight Tutorial","text":"Use --normalize_samples=TRUE better model performance Increase --ncores faster processing multi-core systems Adjust --radius based spatial resolution hypothesis Consider using --type=randomized faster approximate searchlights Set appropriate memory limits options(future.globals.maxSize)","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CommandLineScripts.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"MVPA Searchlight Tutorial","text":"MVPA_Searchlight.R provides flexible searchlight-based MVPA tool works volumetric surface-based data. includes cross-validation, feature selection, extensive configuration command line config files. tool generates comprehensive metrics reproducible outputs help analyze neuroimaging data. Next Steps: - Try different models (--model=rf, --model=sda_notune) - Experiment feature selection methods - Explore surface-based MVPA --data_mode=surface - Use cross-validation strategies appropriate design - Optimize performance parallel processing Happy searchlighting!","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Constructing_Datasets.html","id":"creating-a-real-volumetric-image-based-dataset","dir":"Articles","previous_headings":"","what":"Creating a Real Volumetric (Image-Based) Dataset","title":"Constructing Datasets for MVPA Analysis","text":"example assumes 4D fMRI file (“bold.nii.gz”) corresponding 3D brain mask file (“mask.nii.gz”).","code":"library(neuroim2)  # Read the fMRI data as a NeuroVec object using neuroim2::read_vec train_neurovec <- neuroim2::read_vec(\"path/to/bold.nii.gz\", mode = \"normal\")  # Read the brain mask and create a NeuroVol object mask_vec <- neuroim2::read_vec(\"path/to/mask.nii.gz\", mode = \"normal\") mask_vol <- NeuroVol(as.array(mask_vec), NeuroSpace(dim(mask_vec), spacing = c(2, 2, 2)))  # Create the MVPA image dataset real_dataset <- mvpa_dataset(train_data = train_neurovec, mask = mask_vol)  # Display dataset details print(real_dataset)"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Constructing_Datasets.html","id":"creating-a-real-surface-based-dataset","dir":"Articles","previous_headings":"","what":"Creating a Real Surface-Based Dataset","title":"Constructing Datasets for MVPA Analysis","text":"example assumes cortical geometry stored file (e.g., “subject.lh.smoothwm.asc”) signal matrix CSV format (“surface_data.csv”). signal matrix dimensions corresponding number vertices number observations.","code":"library(neurosurf)  # Load the cortical geometry geom <- read_surf_geometry(\"path/to/subject.lh.smoothwm.asc\")  # Read the surface data from a CSV file # The CSV should not have a header and have dimensions: number of vertices x number of observations data_matrix <- as.matrix(read.csv(\"path/to/surface_data.csv\", header = FALSE))  # Verify that the number of rows in the data matches the geometry nvert <- nrow(neurosurf::vertices(geom)) if(nrow(data_matrix) != nvert) {   stop(\"The number of vertices in the data does not match the geometry.\") }  # Create a NeuroSurfaceVector using the geometry and the data matrix real_neurosurf <- NeuroSurfaceVector(geom, 1:nvert, data_matrix)  # Create the MVPA surface dataset; if no mask is provided, one is generated automatically real_surface_dataset <- mvpa_surface_dataset(train_data = real_neurosurf, name = \"lh\")  # Display dataset details print(real_surface_dataset)"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Constructing_Datasets.html","id":"notes","dir":"Articles","previous_headings":"","what":"Notes","title":"Constructing Datasets for MVPA Analysis","text":"volumetric datasets, NeuroSpace object used define dimensions voxel spacing. surface datasets, ensure signal matrix cortical geometry compatible. Replace file paths actual paths real data files running code.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cross-Validation Strategies in rMVPA","text":"Cross-validation critical component evaluating performance generalizability MVPA models. rMVPA package provides several cross-validation strategies specifically designed neuroimaging data, temporal structure run/block organization must carefully considered. vignette covers: - importance cross-validation MVPA - Available cross-validation schemes - implement scheme - Best practices considerations - Working examples","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"why-cross-validation-matters-in-mvpa","dir":"Articles","previous_headings":"Cross-Validation Fundamentals","what":"Why Cross-Validation Matters in MVPA","title":"Cross-Validation Strategies in rMVPA","text":"Cross-validation essential neuroimaging analyses. gives us unbiased estimates well models perform shows whether brain activity patterns truly generalize new data. separating training test sets, cross-validation prevents us overfitting noise data. also maintains temporal independence sets, crucial time-series neuroimaging data.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"available-cross-validation-schemes","dir":"Articles","previous_headings":"Cross-Validation Fundamentals","what":"Available Cross-Validation Schemes","title":"Cross-Validation Strategies in rMVPA","text":"rMVPA package implements several cross-validation strategies: Blocked Cross-Validation: Uses scanning runs natural validation blocks K-Fold Cross-Validation: Randomly partitions data k folds Bootstrap Blocked Cross-Validation: Resamples within blocks replacement Sequential Blocked Cross-Validation: Creates sequential folds within blocks Two-Fold Blocked Cross-Validation: Splits blocks two groups Custom Cross-Validation: Allows user-defined validation schemes","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"overview","dir":"Articles","previous_headings":"Blocked Cross-Validation","what":"Overview","title":"Cross-Validation Strategies in rMVPA","text":"Blocked cross-validation common approach fMRI data. respects temporal structure data using scanning runs natural validation blocks.","code":"# Create a simple blocked structure: 5 runs with 20 trials each block_var <- rep(1:5, each = 20) cval <- blocked_cross_validation(block_var) print(cval) ##  ##  █▀▀ Blocked Cross-Validation ▀▀█  ##  ## ├─ Dataset Information  ## │  ├─ Observations:  100  ## │  └─ Number of Folds:  5  ## └─ Block Information  ##    ├─ Total Blocks:  5  ##    ├─ Mean Block Size:  20  (SD:  0 )  ##    └─ Block Sizes:  1: 20, 2: 20, 3: 20, 4: 20, 5: 20"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"implementation-example","dir":"Articles","previous_headings":"Blocked Cross-Validation","what":"Implementation Example","title":"Cross-Validation Strategies in rMVPA","text":"","code":"# Generate example data set.seed(123) dat <- data.frame(   x1 = rnorm(100),  # 100 trials total   x2 = rnorm(100),   x3 = rnorm(100) ) y <- factor(rep(letters[1:5], length.out = 100))  # 5 conditions  # Generate cross-validation samples samples <- crossval_samples(cval, dat, y) print(samples) ## # A tibble: 5 × 5 ##   ytrain       ytest        train               test                .id   ##   <named list> <named list> <named list>        <named list>        <chr> ## 1 <fct [80]>   <fct [20]>   <resample [80 x 3]> <resample [20 x 3]> 1     ## 2 <fct [80]>   <fct [20]>   <resample [80 x 3]> <resample [20 x 3]> 2     ## 3 <fct [80]>   <fct [20]>   <resample [80 x 3]> <resample [20 x 3]> 3     ## 4 <fct [80]>   <fct [20]>   <resample [80 x 3]> <resample [20 x 3]> 4     ## 5 <fct [80]>   <fct [20]>   <resample [80 x 3]> <resample [20 x 3]> 5"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"understanding-the-output","dir":"Articles","previous_headings":"Blocked Cross-Validation","what":"Understanding the Output","title":"Cross-Validation Strategies in rMVPA","text":"row samples tibble contains: - ytrain: Training labels - ytest: Test labels - train: Training data subset - test: Test data subset - .id: Fold identifier","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"overview-1","dir":"Articles","previous_headings":"Bootstrap Blocked Cross-Validation","what":"Overview","title":"Cross-Validation Strategies in rMVPA","text":"method combines blocking bootstrap resampling, providing stable performance estimates respecting run structure.","code":"# Create bootstrap blocked CV with 20 repetitions boot_cval <- bootstrap_blocked_cross_validation(block_var, nreps = 20) print(boot_cval) ##  ##  █▀▀ Bootstrap Blocked Cross-Validation ▀▀█  ##  ## ├─ Configuration  ## │  ├─ Observations:  100  ## │  └─ Bootstrap Repetitions:  20  ## ├─ Block Information  ## │  ├─ Total Blocks:  5  ## │  ├─ Mean Block Size:  20  (SD:  0 )  ## │  └─ Block Sizes:  1: 20, 2: 20, 3: 20, 4: 20, 5: 20  ## └─ Sampling Weights  ##    └─ Status:  None  (uniform sampling) # Generate samples boot_samples <- crossval_samples(boot_cval, dat, y) print(boot_samples) ## # A tibble: 100 × 5 ##    ytrain     ytest      train               test                .id   ##    <list>     <list>     <list>              <list>              <chr> ##  1 <fct [80]> <fct [20]> <resample [80 x 3]> <resample [20 x 3]> 001   ##  2 <fct [80]> <fct [20]> <resample [80 x 3]> <resample [20 x 3]> 002   ##  3 <fct [80]> <fct [20]> <resample [80 x 3]> <resample [20 x 3]> 003   ##  4 <fct [80]> <fct [20]> <resample [80 x 3]> <resample [20 x 3]> 004   ##  5 <fct [80]> <fct [20]> <resample [80 x 3]> <resample [20 x 3]> 005   ##  6 <fct [80]> <fct [20]> <resample [80 x 3]> <resample [20 x 3]> 006   ##  7 <fct [80]> <fct [20]> <resample [80 x 3]> <resample [20 x 3]> 007   ##  8 <fct [80]> <fct [20]> <resample [80 x 3]> <resample [20 x 3]> 008   ##  9 <fct [80]> <fct [20]> <resample [80 x 3]> <resample [20 x 3]> 009   ## 10 <fct [80]> <fct [20]> <resample [80 x 3]> <resample [20 x 3]> 010   ## # ℹ 90 more rows"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"optional-weighted-sampling","dir":"Articles","previous_headings":"Bootstrap Blocked Cross-Validation","what":"Optional Weighted Sampling","title":"Cross-Validation Strategies in rMVPA","text":"can provide weights influence sampling probability:","code":"# Create weights (e.g., based on motion parameters) weights <- runif(length(block_var)) weighted_boot_cval <- bootstrap_blocked_cross_validation(   block_var,    nreps = 20,   weights = weights ) print(weighted_boot_cval) ##  ##  █▀▀ Bootstrap Blocked Cross-Validation ▀▀█  ##  ## ├─ Configuration  ## │  ├─ Observations:  100  ## │  └─ Bootstrap Repetitions:  20  ## ├─ Block Information  ## │  ├─ Total Blocks:  5  ## │  ├─ Mean Block Size:  20  (SD:  0 )  ## │  └─ Block Sizes:  1: 20, 2: 20, 3: 20, 4: 20, 5: 20  ## └─ Sampling Weights  ##    ├─ Status:  Present  ##    ├─ Range:  [0.001, 0.020]  ##    └─ Non-zero Weights:  100  ( 100.0% )"},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"overview-2","dir":"Articles","previous_headings":"Sequential Blocked Cross-Validation","what":"Overview","title":"Cross-Validation Strategies in rMVPA","text":"method creates sequential folds within block, useful temporal order matters.","code":"# Create sequential blocked CV with 2 folds and 4 repetitions seq_cval <- sequential_blocked_cross_validation(   block_var,   nfolds = 2,   nreps = 4 ) print(seq_cval) ## $block_var ##   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ##  [38] 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ##  [75] 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ##  ## $nfolds ## [1] 2 ##  ## $nreps ## [1] 4 ##  ## $block_ind ## [1] 1 2 3 4 5 ##  ## attr(,\"class\") ## [1] \"sequential_blocked_cross_validation\" \"cross_validation\"                    ## [3] \"list\""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"overview-3","dir":"Articles","previous_headings":"Two-Fold Blocked Cross-Validation","what":"Overview","title":"Cross-Validation Strategies in rMVPA","text":"approach randomly splits blocks two groups, useful rapid performance estimation.","code":"# Create two-fold blocked CV with 10 repetitions twofold_cval <- twofold_blocked_cross_validation(block_var, nreps = 10) print(twofold_cval) ##  ##  █▀▀ Two-Fold Blocked Cross-Validation ▀▀█  ##  ## ├─ Configuration  ## │  ├─ Observations:  100  ## │  ├─ Number of Folds:  2  ## │  └─ Repetitions:  10  ## └─ Block Information  ##    ├─ Total Blocks:  5  ##    ├─ Mean Block Size:  20  (SD:  0 )  ##    └─ Block Sizes:  1: 20, 2: 20, 3: 20, 4: 20, 5: 20"},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"overview-4","dir":"Articles","previous_headings":"Custom Cross-Validation","what":"Overview","title":"Cross-Validation Strategies in rMVPA","text":"specialized validation schemes, can define custom training/testing splits:","code":"# Define custom splits custom_splits <- list(   list(train = 1:60, test = 61:100),   list(train = 1:40, test = 41:100),   list(train = 1:80, test = 81:100) )  # Create custom CV custom_cval <- custom_cross_validation(custom_splits) print(custom_cval) ## $sample_set ## $sample_set[[1]] ## $sample_set[[1]]$train ##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ## [51] 51 52 53 54 55 56 57 58 59 60 ##  ## $sample_set[[1]]$test ##  [1]  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79 ## [20]  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98 ## [39]  99 100 ##  ##  ## $sample_set[[2]] ## $sample_set[[2]]$train ##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 ##  ## $sample_set[[2]]$test ##  [1]  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59 ## [20]  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78 ## [39]  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97 ## [58]  98  99 100 ##  ##  ## $sample_set[[3]] ## $sample_set[[3]]$train ##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ## [51] 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 ## [76] 76 77 78 79 80 ##  ## $sample_set[[3]]$test ##  [1]  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 ## [20] 100 ##  ##  ##  ## $nfolds ## [1] 3 ##  ## attr(,\"class\") ## [1] \"custom_cross_validation\" \"cross_validation\"        ## [3] \"list\""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"practical-example-model-training","dir":"Articles","previous_headings":"","what":"Practical Example: Model Training","title":"Cross-Validation Strategies in rMVPA","text":"’s complete example using blocked cross-validation SDA classifier:","code":"# Setup cross-validation block_var <- rep(1:5, each = 20) cval <- blocked_cross_validation(block_var)  # Generate data set.seed(123) dat <- data.frame(matrix(rnorm(100 * 10), 100, 10)) y <- factor(rep(letters[1:5], 20))  # Generate CV samples samples <- crossval_samples(cval, dat, y)  # Train models for each fold model_fits <- samples %>%    rowwise() %>%    do({     train_dat <- as.data.frame(.$train)     y_train <- .$ytrain     fit <- sda::sda(as.matrix(train_dat), y_train, verbose = FALSE)     tibble::tibble(fit = list(fit))   })  print(model_fits) ## # A tibble: 5 × 1 ## # Rowwise:  ##   fit    ##   <list> ## 1 <sda>  ## 2 <sda>  ## 3 <sda>  ## 4 <sda>  ## 5 <sda>"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Cross-Validation Strategies in rMVPA","text":"choosing cross-validation strategy, consider: Use blocked CV data clear run/session boundaries Consider sequential CV temporal order matters Use bootstrap blocked CV stable estimates small datasets, bootstrap blocked CV can help large datasets, simple blocked CV may suffice Always respect temporal structure fMRI data Avoid mixing training/testing data run Consider temporal autocorrelation Bootstrap sequential methods require computation Two-fold CV offers quick preliminary results Balance estimation stability computational cost","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Cross-Validation Strategies in rMVPA","text":"Choose right cross-validation strategy neuroimaging data. Match CV approach data structure, account temporal dependencies fMRI, use bootstrap methods need stable estimates. rMVPA package supports approaches, including custom schemes specialized needs. implementation details, refer source code crossval.R.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"integration-with-regional-and-searchlight-analyses","dir":"Articles","previous_headings":"","what":"Integration with Regional and Searchlight Analyses","title":"Cross-Validation Strategies in rMVPA","text":"Cross-validation strategies rMVPA designed work seamlessly regional searchlight analyses. ’ll demonstrate incorporate different cross-validation schemes analyses.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"regional-analysis-example","dir":"Articles","previous_headings":"Integration with Regional and Searchlight Analyses","what":"Regional Analysis Example","title":"Cross-Validation Strategies in rMVPA","text":"Let’s perform regional MVPA analysis using different cross-validation strategies:","code":"# Generate a sample dataset data_out <- gen_sample_dataset(D = c(6,6,6), nobs = 80, blocks = 4, nlevels = 2)  # Create a region mask mask <- data_out$dataset$mask nvox <- sum(mask) region_mask <- neuroim2::NeuroVol(   sample(1:3, size = nvox, replace = TRUE),    space(mask),    indices = which(mask > 0) )  # Create MVPA dataset dset <- mvpa_dataset(data_out$dataset$train_data, mask = data_out$dataset$mask)  # Load the classification model mod <- load_model(\"sda_notune\") tune_grid <- data.frame(lambda = 0.01, diagonal = FALSE)  # Example 1: Using Blocked Cross-Validation blocked_cv <- blocked_cross_validation(data_out$design$block_var) mvpa_mod_blocked <- mvpa_model(   mod,    dataset = dset,    design = data_out$design,   crossval = blocked_cv,   tune_grid = tune_grid )  # Run regional analysis with blocked CV results_blocked <- run_regional(mvpa_mod_blocked, region_mask) ## INFO [2025-03-20 21:30:52]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 # Example 2: Using Bootstrap Blocked Cross-Validation bootstrap_cv <- bootstrap_blocked_cross_validation(   data_out$design$block_var,   nreps = 10 ) mvpa_mod_boot <- mvpa_model(   mod,   dataset = dset,   design = data_out$design,   crossval = bootstrap_cv,   tune_grid = tune_grid )  # Run regional analysis with bootstrap CV results_boot <- run_regional(mvpa_mod_boot, region_mask) ## INFO [2025-03-20 21:30:57]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 # Compare performance between CV strategies cat(\"Blocked CV Performance:\\n\") ## Blocked CV Performance: print(results_blocked$performance_table) ## # A tibble: 3 × 3 ##   roinum Accuracy    AUC ##    <int>    <dbl>  <dbl> ## 1      1    0.6   0.0975 ## 2      2    0.55  0.0931 ## 3      3    0.575 0.114 cat(\"\\nBootstrap CV Performance:\\n\") ##  ## Bootstrap CV Performance: print(results_boot$performance_table) ## # A tibble: 3 × 3 ##   roinum Accuracy    AUC ##    <int>    <dbl>  <dbl> ## 1      1    0.575 0.0569 ## 2      2    0.512 0.0750 ## 3      3    0.588 0.09"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"searchlight-analysis-example","dir":"Articles","previous_headings":"Integration with Regional and Searchlight Analyses","what":"Searchlight Analysis Example","title":"Cross-Validation Strategies in rMVPA","text":"can also use different cross-validation strategies searchlight analysis:","code":"# Example 3: Searchlight with Sequential Blocked Cross-Validation seq_cv <- sequential_blocked_cross_validation(   data_out$design$block_var,   nfolds = 2,   nreps = 4 )  mvpa_mod_seq <- mvpa_model(   mod,   dataset = dset,   design = data_out$design,   crossval = seq_cv,   tune_grid = tune_grid )  # Run searchlight analysis results_searchlight <- run_searchlight(   mvpa_mod_seq,   radius = 2,   method = \"standard\" )"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"key-considerations","dir":"Articles","previous_headings":"Integration with Regional and Searchlight Analyses","what":"Key Considerations","title":"Cross-Validation Strategies in rMVPA","text":"integrating cross-validation regional searchlight analyses: Bootstrap sequential methods generate folds Consider reducing nreps large searchlight analyses Monitor memory usage large datasets Searchlight analysis multiplies computation across voxels Two-fold CV might preferable initial searchlight exploration Use parallel processing available Bootstrap methods provide confidence intervals require computation Consider trade-estimation stability computational cost searchlight analyses, simpler CV schemes might sufficient Different CV schemes might produce slightly different performance estimates Bootstrap methods generally provide conservative estimates Consider averaging results across repetitions bootstrap sequential CV","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/CrossValidation.html","id":"example-comparing-cv-strategies-in-regional-analysis","dir":"Articles","previous_headings":"Integration with Regional and Searchlight Analyses","what":"Example: Comparing CV Strategies in Regional Analysis","title":"Cross-Validation Strategies in rMVPA","text":"’s detailed comparison different CV strategies: integration demonstrates different cross-validation strategies can easily incorporated broader MVPA analysis framework, allowing researchers choose appropriate validation approach specific analysis needs. details regional searchlight analyses, refer respective vignettes implementation regional.R searchlight.R.","code":"# Create different CV schemes cv_schemes <- list(   blocked = blocked_cross_validation(data_out$design$block_var),   bootstrap = bootstrap_blocked_cross_validation(data_out$design$block_var, nreps = 10),   twofold = twofold_blocked_cross_validation(data_out$design$block_var, nreps = 5) )  # Run regional analysis with each CV scheme results <- lapply(cv_schemes, function(cv) {   mvpa_mod <- mvpa_model(     mod,     dataset = dset,     design = data_out$design,     crossval = cv,     tune_grid = tune_grid   )   run_regional(mvpa_mod, region_mask) }) ## INFO [2025-03-20 21:30:59]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## INFO [2025-03-20 21:31:03]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## INFO [2025-03-20 21:31:05]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 # Compare performance across CV schemes performance_comparison <- lapply(names(results), function(name) {   perf <- results[[name]]$performance_table   perf$cv_scheme <- name   perf })  # Combine results all_performance <- do.call(rbind, performance_comparison) print(all_performance) ## # A tibble: 9 × 4 ##   roinum Accuracy    AUC cv_scheme ##    <int>    <dbl>  <dbl> <chr>     ## 1      1    0.6   0.0975 blocked   ## 2      2    0.55  0.0931 blocked   ## 3      3    0.575 0.114  blocked   ## 4      1    0.6   0.0675 bootstrap ## 5      2    0.55  0.0663 bootstrap ## 6      3    0.6   0.0700 bootstrap ## 7      1    0.588 0.114  twofold   ## 8      2    0.538 0.0813 twofold   ## 9      3    0.525 0.0806 twofold"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/FeatureSelection.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Feature Selection in rMVPA","text":"modern neuroimaging machine learning analyses, datasets often contain large number features (e.g., voxels). Many features can noisy irrelevant prediction task hand. Feature selection critical step reduce dimensionality, improve model interpretability, potentially enhance predictive performance. essential integrate feature selection within cross-validation framework avoid introducing selection bias. rMVPA package, feature selection can applied automatically part analysis pipeline. rMVPA, feature selector object used specify method criteria feature selection. Two primary methods available: FTest: Performs one-way ANOVA F-test feature uses resulting p-values selection. catscore: Computes correlation-adjusted t-scores (using sda.ranking function sda package) rank features. Additionally, two types cutoff criteria supported: Top_k (“topk”): Selects top k features based ranking. Top_p (“topp”): Selects proportion p features (e.g., setting p 0.1 selects top 10% features).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/FeatureSelection.html","id":"creating-a-feature-selector-object","dir":"Articles","previous_headings":"","what":"Creating a Feature Selector Object","title":"Feature Selection in rMVPA","text":"create feature selector rMVPA, use feature_selector() function. example, construct feature selector using FTest method top_k cutoff (selecting top 10 features): Similarly, can create feature selector selects proportion features using top_p option. example , select top 10% features based FTest ranking:","code":"suppressPackageStartupMessages(library(rMVPA)) # Create a feature selector using FTest with top_k cutoff (select top 10 features) fsel <- feature_selector(method = \"FTest\", cutoff_type = \"top_k\", cutoff_value = 10) fsel ## $cutoff_type ## [1] \"top_k\" ##  ## $cutoff_value ## [1] 10 ##  ## attr(,\"class\") ## [1] \"FTest\"            \"feature_selector\" \"list\" # Create a feature selector using FTest with top_p cutoff (select top 10% of features) fsel <- feature_selector(method = \"FTest\", cutoff_type = \"top_p\", cutoff_value = 0.1) fsel ## $cutoff_type ## [1] \"top_p\" ##  ## $cutoff_value ## [1] 0.1 ##  ## attr(,\"class\") ## [1] \"FTest\"            \"feature_selector\" \"list\""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/FeatureSelection.html","id":"applying-feature-selection-to-data","dir":"Articles","previous_headings":"","what":"Applying Feature Selection to Data","title":"Feature Selection in rMVPA","text":"select_features() function applies feature selection process given feature matrix X response variable Y. function returns logical vector TRUE selected features FALSE otherwise. example using simulated data: Now, let’s use top_p option. select proportion features. example, cutoff value 0.1, top 10% features selected:","code":"# Simulate a response variable (categorical) Y <- factor(rep(letters[1:4], each = 25))  # Simulate a feature matrix with 100 samples and 100 features X <- matrix(rnorm(100 * 100), nrow = 100, ncol = 100)  # Apply feature selection using the FTest method with top_k cutoff fsel <- feature_selector(method = \"FTest\", cutoff_type = \"top_k\", cutoff_value = 10) selected_features <- select_features(fsel, X, Y)  # The number of selected features should be equal to the cutoff value (10) cat(\"Number of selected features (top_k):\", sum(selected_features), \"\\n\") ## Number of selected features (top_k): 10 # Apply feature selection using the FTest method with top_p cutoff (select top 10% of features) fsel <- feature_selector(method = \"FTest\", cutoff_type = \"top_p\", cutoff_value = 0.1) selected_features <- select_features(fsel, X, Y)  # Calculate the proportion of features selected the_proportion <- sum(selected_features) / ncol(X) cat(\"Proportion of features selected (top_p):\", the_proportion, \"\\n\") ## Proportion of features selected (top_p): 0.1"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/FeatureSelection.html","id":"using-the-catscore-method","dir":"Articles","previous_headings":"","what":"Using the catscore Method","title":"Feature Selection in rMVPA","text":"Alternatively, can use catscore method perform feature selection. catscore method computes correlation-adjusted t-score feature. ’s example:","code":"# Create a feature selector using catscore with top_k cutoff (select top 10 features) fsel <- feature_selector(method = \"catscore\", cutoff_type = \"top_k\", cutoff_value = 10)  # Simulate a response variable and feature matrix Y <- factor(rep(letters[1:3], length.out = 90)) X <- matrix(rnorm(90 * 50), nrow = 90, ncol = 50)  # Apply feature selection using catscore selected_features <- select_features(fsel, X, Y, ranking.score = \"entropy\")  cat(\"Number of features selected using catscore (top_k):\", sum(selected_features), \"\\n\") ## Number of features selected using catscore (top_k): 10"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/FeatureSelection.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Feature Selection in rMVPA","text":"Feature selection powerful tool reduce dimensionality high-dimensional datasets, especially neuroimaging applications. rMVPA, integration feature selection cross-validation workflows helps ensure models built unbiased, relevant subsets data. can choose different methods (FTest catscore) cutoff strategies (top_k vs top_p) based specific analysis needs.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"MVPA Regional Analysis Tutorial","text":"tutorial explains run regional multivariate pattern analysis (MVPA) using MVPA_Regional.R. script performs MVPA specified brain regions, enabling classification regression analyses fMRI data. Regional analysis can conducted volumetric (NIfTI) surface-based neuroimaging data, allows separate training testing subsets.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"key-features","dir":"Articles","previous_headings":"Introduction","what":"Key Features","title":"MVPA Regional Analysis Tutorial","text":"script handles volumetric NIfTI surface-based data formats. can evaluate specific regions using separate training testing subsets. parameters configurable YAML R files. analysis produces comprehensive outputs including performance maps, prediction tables, configuration records. Cross-validation options include blocked, k-fold, two-fold approaches. script works built-MVPA models integrates caret package additional model options. Data preprocessing includes optional centering/scaling flexible feature selection methods.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"basic-usage","dir":"Articles","previous_headings":"Running the Script","what":"1. Basic Usage","title":"MVPA Regional Analysis Tutorial","text":": 4D fMRI file training (e.g., train_data.nii) trial--trial design matrix (e.g., train_design.txt) brain mask file (e.g., mask.nii) can run regional analysis command line:","code":"Rscript MVPA_Regional.R --train_design=train_design.txt \\                          --train_data=train_data.nii \\                          --mask=mask.nii \\                          --model=sda_notune \\                          --label_column=condition \\                          --ncores=4 \\                          --output=my_regional_output"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"understanding-data-modes","dir":"Articles","previous_headings":"Running the Script","what":"2. Understanding Data Modes","title":"MVPA Regional Analysis Tutorial","text":"script supports two primary data modes:","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"image-mode-volumetric-data","dir":"Articles","previous_headings":"Running the Script > 2. Understanding Data Modes","what":"Image Mode (Volumetric Data)","title":"MVPA Regional Analysis Tutorial","text":"Default mode (--data_mode=image) Works NIfTI files binary mask Analyzes region-level data based voxel masks","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"surface-mode","dir":"Articles","previous_headings":"Running the Script > 2. Understanding Data Modes","what":"Surface Mode","title":"MVPA Regional Analysis Tutorial","text":"Activated --data_mode=surface Processes surface-based neuroimaging data Can handle multiple surface sections","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"available-models","dir":"Articles","previous_headings":"Running the Script","what":"3. Available Models","title":"MVPA Regional Analysis Tutorial","text":"script supports various classification regression models:","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"built-in-mvpa-models","dir":"Articles","previous_headings":"Running the Script > 3. Available Models","what":"Built-in MVPA Models:","title":"MVPA Regional Analysis Tutorial","text":"corclass: Correlation-based classifier template matching sda_notune: Shrinkage Discriminant Analysis without tuning sda_boot: SDA bootstrap resampling glmnet_opt: Elastic net EPSGO parameter optimization sparse_sda: SDA sparsity constraints sda_ranking: SDA automatic feature ranking mgsda: Multi-Group Sparse Discriminant Analysis lda_thomaz: Modified LDA high-dimensional data hdrda: High-Dimensional Regularized Discriminant Analysis","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"caret-models","dir":"Articles","previous_headings":"Running the Script > 3. Available Models","what":"Caret Models:","title":"MVPA Regional Analysis Tutorial","text":"model available caret package (e.g., rf, svmRadial, glmnet)","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"cross-validation-options","dir":"Articles","previous_headings":"Running the Script","what":"4. Cross-Validation Options","title":"MVPA Regional Analysis Tutorial","text":"Multiple cross-validation strategies available:","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"blocked-cross-validation","dir":"Articles","previous_headings":"Running the Script > 4. Cross-Validation Options","what":"Blocked Cross-Validation","title":"MVPA Regional Analysis Tutorial","text":"Uses blocking variable (e.g., session) splitting data.","code":"--block_column=session"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"k-fold-cross-validation","dir":"Articles","previous_headings":"Running the Script > 4. Cross-Validation Options","what":"K-Fold Cross-Validation","title":"MVPA Regional Analysis Tutorial","text":"Default block column specified; uses random splits.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"two-fold-cross-validation","dir":"Articles","previous_headings":"Running the Script > 4. Cross-Validation Options","what":"Two-Fold Cross-Validation","title":"MVPA Regional Analysis Tutorial","text":"Specify configuration file:","code":"cross_validation:   name: \"twofold\"   nreps: 10"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"advanced-cross-validation-methods","dir":"Articles","previous_headings":"Running the Script > 4. Cross-Validation Options","what":"Advanced Cross-Validation Methods","title":"MVPA Regional Analysis Tutorial","text":"addition standard options , several advanced cross-validation strategies available: Blocked Cross-Validation: Divides dataset based blocking variable (e.g., session) samples block remain together. K-Fold Cross-Validation: Randomly partitions data k folds, providing robust estimate model performance. Bootstrap Blocked Cross-Validation: Generates bootstrap resamples within blocks assess model stability heterogeneous datasets. Sequential Blocked Cross-Validation: Assigns sequential folds within block, preserving temporal ordered structures. Custom Cross-Validation: Allows define custom training testing splits standard methods fit experimental design. Specify desired method configuration file setting name field cross_validation. example, use bootstrap blocked cross-validation: Choose method best aligns data structure experimental design.","code":"cross_validation:   name: \"bootstrap\"   # Options: \"twofold\", \"bootstrap\", \"sequential\", \"custom\", \"kfold\"   nreps: 10"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"feature-selection","dir":"Articles","previous_headings":"Running the Script","what":"5. Feature Selection","title":"MVPA Regional Analysis Tutorial","text":"Enable feature selection :","code":"feature_selector:   method: \"anova\"  # Options: \"correlation\", \"t-test\", etc.   cutoff_type: \"percentile\"   cutoff_value: 0.1"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"understanding-label_column","dir":"Articles","previous_headings":"Running the Script","what":"6. Understanding label_column","title":"MVPA Regional Analysis Tutorial","text":"label column specifies target variable: classification, contain categorical labels (e.g., “Face”, “House”). regression, contain continuous values (e.g., reaction times). Example Design File (train_design.txt):","code":"trial  condition  subject  session 1      Face       S01      1 2      House      S01      1 3      Face       S01      1 4      House      S01      1 5      Face       S01      2"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"using-a-configuration-file","dir":"Articles","previous_headings":"Running the Script","what":"7. Using a Configuration File","title":"MVPA Regional Analysis Tutorial","text":"Instead specifying options command line, can use configuration file. Example YAML Config File (regional_config.yaml): Running Config File:","code":"# Data Sources train_design: \"train_design.txt\" test_design: \"test_design.txt\" train_data: \"train_data.nii\" test_data: \"test_data.nii\" mask: \"mask.nii\"  # Analysis Parameters model: \"rf\"  # Random Forest classifier data_mode: \"image\"  # or \"surface\" ncores: 4 label_column: \"condition\" block_column: \"session\"  # Output Options output: \"regional_results\" normalize_samples: TRUE class_metrics: TRUE  # Advanced Options feature_selector:   method: \"anova\"   cutoff_type: \"percentile\"   cutoff_value: 0.1  cross_validation:   name: \"twofold\"   nreps: 10  # Optional Subsetting: Define different subsets for training and testing train_subset: \"subject == 'S01'\" test_subset: \"subject == 'S02'\" Rscript MVPA_Regional.R --config=regional_config.yaml"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"expected-outputs","dir":"Articles","previous_headings":"Running the Script","what":"8. Expected Outputs","title":"MVPA Regional Analysis Tutorial","text":"running script, output directory (e.g., regional_results/) contains: Performance Maps: NIfTI files region-level performance metrics (e.g., accuracy, AUC). Prediction Tables: Text files summarizing predictions region. Configuration File: config.yaml complete analysis parameters reproducibility. Example directory structure: regression analyses, different metrics (e.g., r2.nii, rmse.nii, spearcor.nii) output.","code":"regional_results/ ├── performance_table.txt   # Regional performance metrics ├── prediction_table.txt    # Prediction details per region ├── regional_metric1.nii    # Regional performance map (e.g., accuracy or AUC) ├── regional_metric2.nii    # Additional metric maps (if applicable) └── config.yaml             # Analysis configuration"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"performance-considerations","dir":"Articles","previous_headings":"Running the Script","what":"9. Performance Considerations","title":"MVPA Regional Analysis Tutorial","text":"Use --normalize_samples=TRUE improved model performance. Increase --ncores leverage multi-core systems. Adjust parameters based spatial resolution hypotheses. Select appropriate cross-validation strategies prevent overfitting.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/MVPA_RegionalCmdline.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"MVPA Regional Analysis Tutorial","text":"MVPA_Regional.R provides comprehensive regional MVPA analysis capabilities. handles volumetric surface-based data formats flexible configuration command line config files. tool generates detailed performance maps prediction tables, incorporating robust cross-validation feature selection ensure reliable results. Next Steps: - Experiment various models (--model=rf, --model=sda_notune). - Test different feature selection methods. - Evaluate classification regression scenarios. - Optimize processing using parallel computation. Happy regional analysis!","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"introduction-to-representational-similarity-analysis","dir":"Articles","previous_headings":"","what":"Introduction to Representational Similarity Analysis","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"Representational Similarity Analysis (RSA) compares neural activity patterns computational models measuring pattern similarities, matching model predictions, quantifying well models explain neural data. rMVPA package implements technique neuroimaging analysis.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"dissimilarity-matrices","dir":"Articles","previous_headings":"Basic Concepts","what":"Dissimilarity Matrices","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"dissimilarity matrix represents pairwise differences conditions stimuli. RSA: - cell (,j) represents different conditions j - Can derived neural data theoretical models - Common measures: correlation distance (1 - correlation), Euclidean distance","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"rsa-workflow-in-rmvpa","dir":"Articles","previous_headings":"Basic Concepts","what":"RSA Workflow in rMVPA","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"Create MVPA dataset Define model dissimilarity matrices Create RSA design Build run RSA model","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"creating-sample-data","dir":"Articles","previous_headings":"Step-by-Step Example","what":"1. Creating Sample Data","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"Let’s create simple example dataset known structure:","code":"# Generate a sample dataset (20x20x8 volume, 80 observations, 4 blocks) dataset <- rMVPA::gen_sample_dataset(D=c(20,20,8), nobs = 80, blocks=4)"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"creating-model-dissimilarity-matrices","dir":"Articles","previous_headings":"Step-by-Step Example","what":"2. Creating Model Dissimilarity Matrices","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"can use different types dissimilarity matrices:","code":"# Method 1: Using dist() on feature vectors model_features <- matrix(rnorm(80*10), 80, 10)  # 80 trials, 10 features model_rdm <- dist(model_features)  # Default is Euclidean distance  # Method 2: Direct correlation distance matrix model_matrix <- 1 - cor(t(model_features))  # Correlation distance"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"creating-an-rsa-design","dir":"Articles","previous_headings":"Step-by-Step Example","what":"3. Creating an RSA Design","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"RSA design specifies compare neural model dissimilarity patterns:","code":"# Basic design with one model RDM basic_design <- rsa_design(   formula = ~ model_rdm,   data = list(model_rdm = model_rdm),   block_var = factor(dataset$design$block_var) )  # Design with multiple model RDMs model_rdm2 <- dist(matrix(rnorm(80*10), 80, 10)) complex_design <- rsa_design(   formula = ~ model_rdm + model_rdm2,   data = list(     model_rdm = model_rdm,     model_rdm2 = model_rdm2   ),   block_var = factor(dataset$design$block_var),   keep_intra_run = FALSE  # Exclude within-run comparisons )"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"creating-and-running-an-rsa-model","dir":"Articles","previous_headings":"Step-by-Step Example","what":"4. Creating and Running an RSA Model","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"rsa_model() function supports different methods computing neural dissimilarities analyzing relationships:","code":"# Create MVPA dataset dset <- mvpa_dataset(dataset$dataset$train_data, mask=dataset$dataset$mask)  # Create RSA model with different options rsa_spearman <- rsa_model(   dataset = dset,   design = basic_design,   distmethod = \"spearman\",  # Method for computing neural dissimilarities   regtype = \"spearman\"      # Method for comparing neural and model RDMs )  # Run searchlight analysis results <- run_searchlight(   rsa_spearman,   radius = 4,   method = \"standard\" ) ## function (model_spec, good_results, bad_results = NULL)   ## [1] \"combiner is \" ## INFO [2025-03-20 21:31:20] Running standard searchlight with radius = 4 ## INFO [2025-03-20 21:31:20] creating standard searchlight ## INFO [2025-03-20 21:31:20] running standard searchlight iterator ## INFO [2025-03-20 21:31:20] ⚡ Processing batch 1/11 ## INFO [2025-03-20 21:31:21] ⚡ Processing batch 2/11 ## INFO [2025-03-20 21:31:21] ⚡ Processing batch 3/11 ## INFO [2025-03-20 21:31:22] ⚡ Processing batch 4/11 ## INFO [2025-03-20 21:31:23] ⚡ Processing batch 5/11 ## INFO [2025-03-20 21:31:23] ⚡ Processing batch 6/11 ## INFO [2025-03-20 21:31:24] ⚡ Processing batch 7/11 ## INFO [2025-03-20 21:31:25] ⚡ Processing batch 8/11 ## INFO [2025-03-20 21:31:25] ⚡ Processing batch 9/11 ## INFO [2025-03-20 21:31:26] ⚡ Processing batch 10/11 ## INFO [2025-03-20 21:31:27] ⚡ Processing batch 11/11 ## INFO [2025-03-20 21:31:27]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 256 ## ├─ Processed: 256 ## └─ Skipped: 0"},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"multiple-comparison-methods","dir":"Articles","previous_headings":"Advanced Features","what":"Multiple Comparison Methods","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"rMVPA supports several methods comparing neural model RDMs:","code":"# Pearson correlation rsa_pearson <- rsa_model(dset, basic_design,                          distmethod = \"pearson\",                          regtype = \"pearson\")  # Linear regression rsa_lm <- rsa_model(dset, basic_design,                      distmethod = \"spearman\",                      regtype = \"lm\")  # Rank-based regression rsa_rfit <- rsa_model(dset, basic_design,                        distmethod = \"spearman\",                        regtype = \"rfit\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"handling-run-structure","dir":"Articles","previous_headings":"Advanced Features","what":"Handling Run Structure","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"RSA can account run/block structure fMRI data. critical consideration fMRI analysis whether include comparisons patterns run.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"understanding-keep_intra_run","dir":"Articles","previous_headings":"Advanced Features > Handling Run Structure","what":"Understanding keep_intra_run","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"keep_intra_run = FALSE parameter tells RSA exclude comparisons patterns within run/block. important : Temporal Autocorrelation: BOLD responses within run temporally autocorrelated Scanner Drift: Within-run patterns may share scanner drift effects Physiological Noise: Within-run patterns may share structured noise breathing, heart rate, etc. ’s visualization keep_intra_run = FALSE : create RSA design keep_intra_run = FALSE: creates RSA design : - Comparisons patterns different runs included - Comparisons patterns within run excluded - analysis focuses reliable -run pattern similarities","code":"# Create a small example with 2 runs, 4 trials each mini_data <- matrix(1:8, ncol=1)  # Trial numbers 1-8 run_labels <- c(1,1,1,1, 2,2,2,2)  # Two runs with 4 trials each  # Create distance matrix d <- dist(mini_data) d_mat <- as.matrix(d)  # Show which comparisons are kept (TRUE) or excluded (FALSE) comparison_matrix <- outer(run_labels, run_labels, \"!=\") # Only show lower triangle to match distance matrix structure comparison_matrix[upper.tri(comparison_matrix)] <- NA  # Display the matrices cat(\"Trial numbers:\\n\") ## Trial numbers: print(matrix(1:8, nrow=8, ncol=8)[lower.tri(matrix(1:8, 8, 8))]) ##  [1] 2 3 4 5 6 7 8 3 4 5 6 7 8 4 5 6 7 8 5 6 7 8 6 7 8 7 8 8 cat(\"\\nRun comparisons (TRUE = across-run, FALSE = within-run):\\n\") ##  ## Run comparisons (TRUE = across-run, FALSE = within-run): print(comparison_matrix[lower.tri(comparison_matrix)]) ##  [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE ## [13]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE ## [25] FALSE FALSE FALSE FALSE # Create design excluding within-run comparisons blocked_design <- rsa_design(   formula = ~ model_rdm,   data = list(model_rdm = model_rdm),   block_var = factor(dataset$design$block_var),   keep_intra_run = FALSE  # Exclude within-run comparisons )"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"when-to-use-keep_intra_run-false","dir":"Articles","previous_headings":"Advanced Features > Handling Run Structure","what":"When to Use keep_intra_run = FALSE","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"consider setting keep_intra_run = FALSE : - experiment multiple runs/blocks - want control temporal autocorrelation - want minimize impact run-specific noise - ’re following conservative analysis practices Setting keep_intra_run = TRUE (default) might appropriate : - runs need samples - runs short - ’ve carefully controlled temporal confounds - ’re exploratory analyses","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"visualizing-results","dir":"Articles","previous_headings":"Advanced Features","what":"Visualizing Results","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"can examine visualize RSA results:","code":"# Get range of correlation values range(results$results$model_rdm$data) ## [1] -0.03065412  0.02820032 # Basic summary of results print(results) ##  ##  █▀▀ Searchlight Analysis Results ▀▀█  ##  ## ├─ Coverage  ## │  ├─ Total Voxels:  3,200  ## │  └─ Active Voxels:  256  ## └─ Performance Metrics  ##    ├─  model_rdm  ##    │  ├─ Mean:  -0.0070  ##    │  ├─ SD:  0.0070  ##    │  ├─ Min:  -0.0307  ##    │  └─ Max:  0.0282 # Save results (commented out) # write_vol(results$model_rdm, \"RSA_results.nii.gz\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"rMVPA package provides comprehensive RSA implementation flexible model specification, multiple dissimilarity computation methods, support complex experimental designs run/block structures. integrates seamlessly searchlight analysis offers various statistical approaches including correlation, regression, rank-based methods. using RSA rMVPA, carefully consider experimental design setting block variables intra-run parameters, choose distance methods match theoretical framework, select statistical approaches appropriate analysis goals.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/RSA.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Representational Similarity Analysis (RSA) in rMVPA","text":"information RSA: - Kriegeskorte et al. (2008). Representational similarity analysis - connecting branches systems neuroscience. Front Syst Neurosci. - Nili et al. (2014). toolbox representational similarity analysis. PLoS Comput Biol.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Regional_Analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Advanced Regional MVPA Analysis in rMVPA","text":"Regional MVPA evaluates prediction performance within predefined brain regions. vignette walks complete workflow using rMVPA: ’ll generate synthetic data, define ROIs region mask, build MVPA model cross-validation, run analysis, examine results. implementation follows approach regional.R, mvpa_model.R, dataset.R.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Regional_Analysis.html","id":"data-generation-and-preparation","dir":"Articles","previous_headings":"","what":"Data Generation and Preparation","title":"Advanced Regional MVPA Analysis in rMVPA","text":"begin generating synthetic volumetric dataset using gen_sample_dataset() function. function creates 4D array (spatial dimensions multiple observations), along binary mask associated design cross-validation. returned list contains: dataset: MVPA dataset object training data binary mask. design: MVPA design object specifying response variable block structure.","code":"library(rMVPA) library(neuroim2) # Generate a synthetic dataset with dimensions 6x6x6, 80 observations, divided into 4 blocks data_out <- rMVPA::gen_sample_dataset(D = c(6,6,6), nobs = 80, blocks = 4, nlevels = 2) print(data_out) ## $dataset ##  ##  █▀▀ MVPA Dataset ▀▀█  ##  ## ├─ Training Data  ## │  ├─ Dimensions:  6 × 6 × 6 × 80 observations  ## │  └─ Type:  DenseNeuroVec  ## ├─ Test Data  ## │  └─  None  ## └─ Mask Information  ##    ├─ Areas:  1 : 120  ##    └─ Active voxels/vertices:  120  ##  ##  ## $design ##  ##  █▀▀ MVPA Design ▀▀█  ##  ## ├─ Training Data  ## │  ├─ Observations:  80  ## │  ├─ Response Type:  Factor ## │  ├─ Levels:  a, b  ## │  └─ Class Distribution:  a: 40, b: 40  ## ├─ Test Data  ## │  └─  None  ## └─ Structure  ##    ├─ Blocking:  Present ##    ├─ Number of Blocks:  4  ##    ├─ Mean Block Size:  20  (SD:  0 )  ##    └─ Split Groups:  None"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Regional_Analysis.html","id":"creating-a-region-mask","dir":"Articles","previous_headings":"Data Generation and Preparation","what":"Creating a Region Mask","title":"Advanced Regional MVPA Analysis in rMVPA","text":"regional analysis, need define ROIs. , create region mask randomly assigning active voxel binary mask region label (1 3). simulates scenario brain partitioned three regions interest.","code":"# Extract the binary mask from the dataset mask <- data_out$dataset$mask nvox <- sum(mask)  # Create a regional mask: assign each voxel a random region number (1 to 3) set.seed(123)  # for reproducibility region_mask <- neuroim2::NeuroVol(sample(1:3, size = nvox, replace = TRUE), neuroim2::space(mask), indices = which(mask > 0)) table(region_mask) ## region_mask ##  0  1  2  3  ## 96 36 44 40"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Regional_Analysis.html","id":"setting-up-the-mvpa-model","dir":"Articles","previous_headings":"","what":"Setting Up the MVPA Model","title":"Advanced Regional MVPA Analysis in rMVPA","text":"Next, create MVPA model evaluate classification task. involves: Constructing MVPA dataset using mvpa_dataset(). Specifying design (including block variable response) via mvpa_design(). Defining model mvpa_model() using chosen classifier cross-validation strategy. mvpa_model() function, defined mvpa_model.R, packages necessary parameters including cross-validation performance computation.","code":"# Create MVPA dataset object from the generated training data and mask  dset <- mvpa_dataset(data_out$dataset$train_data, mask = data_out$dataset$mask)  # Build cross-validation structure using block information from the design cval <- blocked_cross_validation(data_out$design$block_var)  # Load a classification model; here we use \"sda\" (Shrinkage Discriminant Analysis) mod <- load_model(\"sda\") tune_grid <- data.frame(lambda = 0.01, diagonal = FALSE)  # Create the MVPA model object mvpa_mod <- mvpa_model(mod, dataset = dset, design = data_out$design, crossval = cval, tune_grid = tune_grid) print(mvpa_mod) ## mvpa_model object.  ## model:  sda  ## model type:  classification  ## tune_reps:  15  ## tune_grid:   ##   lambda diagonal ## 1   0.01    FALSE ##  ##  █▀▀ Blocked Cross-Validation ▀▀█  ##  ## ├─ Dataset Information  ## │  ├─ Observations:  80  ## │  └─ Number of Folds:  4  ## └─ Block Information  ##    ├─ Total Blocks:  4  ##    ├─ Mean Block Size:  20  (SD:  0 )  ##    └─ Block Sizes:  1: 20, 2: 20, 3: 20, 4: 20  ##  ##  ##  █▀▀ MVPA Dataset ▀▀█  ##  ## ├─ Training Data  ## │  ├─ Dimensions:  6 × 6 × 6 × 80 observations  ## │  └─ Type:  DenseNeuroVec  ## ├─ Test Data  ## │  └─  None  ## └─ Mask Information  ##    ├─ Areas:  1 : 120  ##    └─ Active voxels/vertices:  120  ##  ##  ##  █▀▀ MVPA Design ▀▀█  ##  ## ├─ Training Data  ## │  ├─ Observations:  80  ## │  ├─ Response Type:  Factor ## │  ├─ Levels:  a, b  ## │  └─ Class Distribution:  a: 40, b: 40  ## ├─ Test Data  ## │  └─  None  ## └─ Structure  ##    ├─ Blocking:  Present ##    ├─ Number of Blocks:  4  ##    ├─ Mean Block Size:  20  (SD:  0 )  ##    └─ Split Groups:  None"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Regional_Analysis.html","id":"running-the-regional-analysis","dir":"Articles","previous_headings":"","what":"Running the Regional Analysis","title":"Advanced Regional MVPA Analysis in rMVPA","text":"regional analysis executed run_regional() function, : Prepares ROIs extracting voxel indices region mask. Iterates regions, applying MVPA model ROI. Compiles performance metrics prediction tables. output regional_mvpa_result object containing: performance_table: Cross-validated performance metrics per region. prediction_table: Detailed predictions ROI trial. vol_results: Volumetric maps representing performance distributed across brain.","code":"# Run the regional analysis on the defined region mask regional_results <- run_regional(mvpa_mod, region_mask)"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Regional_Analysis.html","id":"examining-the-results","dir":"Articles","previous_headings":"","what":"Examining the Results","title":"Advanced Regional MVPA Analysis in rMVPA","text":"can inspect performance table evaluate model accuracy region. detailed view, prediction table shows trial--trial predictions: Volumetric results (vol_results) can visualized neuroimaging tools determine spatial patterns performance.","code":"# Display performance metrics for each region print(regional_results$performance_table) ## # A tibble: 3 × 3 ##   roinum Accuracy     AUC ##    <int>    <dbl>   <dbl> ## 1      1    0.475 -0.0194 ## 2      2    0.375 -0.114  ## 3      3    0.612  0.160 # Display the prediction table print(regional_results$prediction_table) ## # A tibble: 240 × 8 ## # Rowwise:  ##    .rownum roinum observed pobserved predicted correct prob_a    prob_b ##      <int>  <int> <fct>        <dbl> <chr>     <lgl>    <dbl>     <dbl> ##  1       1      1 b           0.966  b         TRUE    0.0337 0.966     ##  2       2      1 a           0.663  a         TRUE    0.663  0.337     ##  3       3      1 a           0.599  a         TRUE    0.599  0.401     ##  4       4      1 b           0.952  b         TRUE    0.0481 0.952     ##  5       5      1 b           0.0166 a         FALSE   0.983  0.0166    ##  6       6      1 a           0.996  a         TRUE    0.996  0.00354   ##  7       7      1 b           0.507  b         TRUE    0.493  0.507     ##  8       8      1 a           0.0589 b         FALSE   0.0589 0.941     ##  9       9      1 a           1.00   a         TRUE    1.00   0.000411  ## 10      10      1 a           1.00   a         TRUE    1.00   0.0000256 ## # ℹ 230 more rows"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Regional_Analysis.html","id":"under-the-hood-how-it-works","dir":"Articles","previous_headings":"","what":"Under the Hood: How It Works","title":"Advanced Regional MVPA Analysis in rMVPA","text":"run_regional() function internally calls prep_regional() (regional.R) process region mask, uses mvpa_iterate() apply MVPA model across ROI. Functions combine_regional_results() combine_prediction_tables() merge individual regional outputs comprehensive result. modular design, laid mvpa_model.R dataset.R, ensures : Data integrity maintained. Cross-validation properly applied. Results aggregated clear interpretation regional level.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Regional_Analysis.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Advanced Regional MVPA Analysis in rMVPA","text":"vignette showed generate synthetic neuroimaging data, define ROIs region masks, set MVPA models cross-validation, run analyses across ROIs, interpret performance metrics. now tools conduct regional MVPA analyses neuroimaging data. details, please refer source files: regional.R regional analysis methods. mvpa_model.R MVPA model creation result formatting. dataset.R dataset generation routines. Happy analyzing!","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Searchlight_Analysis.html","id":"searchlight-analysis","dir":"Articles","previous_headings":"","what":"Searchlight Analysis","title":"Searchlight Analysis","text":"","code":"## Warning in rgl.init(initValue, onlyNULL): RGL: unable to open X11 display ## Warning: 'rgl.init' failed, will use the null device. ## See '?rgl.useNULL' for ways to avoid this warning."},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Searchlight_Analysis.html","id":"generate-a-volumetric-dataset-with-100-observations-and-two-classes","dir":"Articles","previous_headings":"Searchlight Analysis","what":"Generate a volumetric dataset with 100 observations and two classes","title":"Searchlight Analysis","text":"generate dataset use gen_sample_dataset function. creating 4-dimensional neuroimaging dataset, 6--6--6 spatial dimensions 80 observations 4th dimension. 80 observations divided 4 blocks, consisting 20 trials. generated y variable factor 2 levels (‘’ ‘b’). gen_sample_dataset function creates list two elements: mvpa_dataset object (dataset) mvpa_design object (design). first contains information data second contains information experimental design.","code":"dataset <- gen_sample_dataset(D=c(6,6,6), nobs = 80, blocks=4, nlevels=2) print(dataset) ## $dataset ##  ##  █▀▀ MVPA Dataset ▀▀█  ##  ## ├─ Training Data  ## │  ├─ Dimensions:  6 × 6 × 6 × 80 observations  ## │  └─ Type:  DenseNeuroVec  ## ├─ Test Data  ## │  └─  None  ## └─ Mask Information  ##    ├─ Areas:  1 : 120  ##    └─ Active voxels/vertices:  120  ##  ##  ## $design ##  ##  █▀▀ MVPA Design ▀▀█  ##  ## ├─ Training Data  ## │  ├─ Observations:  80  ## │  ├─ Response Type:  Factor ## │  ├─ Levels:  a, b  ## │  └─ Class Distribution:  a: 40, b: 40  ## ├─ Test Data  ## │  └─  None  ## └─ Structure  ##    ├─ Blocking:  Present ##    ├─ Number of Blocks:  4  ##    ├─ Mean Block Size:  20  (SD:  0 )  ##    └─ Split Groups:  None"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Searchlight_Analysis.html","id":"create-a-cross-validation-object-using-a-pre-defined-blocking-variable-","dir":"Articles","previous_headings":"Searchlight Analysis","what":"Create a cross-validation object using a pre-defined blocking variable.","title":"Searchlight Analysis","text":"MVPA analyses involve collection fMRI data series scanning runs, “blocks”. Due intra-block serial correlations, makes sense take advantage block structure cross-validation. words, want train classifier k-1 blocks test set trials k held blocks. form leave-one-group-cross-validation, encapsulated blocked_cross_validation function.","code":"block <- dataset$design$block_var crossval <- blocked_cross_validation(block) crossval ##  ##  █▀▀ Blocked Cross-Validation ▀▀█  ##  ## ├─ Dataset Information  ## │  ├─ Observations:  80  ## │  └─ Number of Folds:  4  ## └─ Block Information  ##    ├─ Total Blocks:  4  ##    ├─ Mean Block Size:  20  (SD:  0 )  ##    └─ Block Sizes:  1: 20, 2: 20, 3: 20, 4: 20"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Searchlight_Analysis.html","id":"construct-an-mvpa_model-object-with-a-shrinkage-discriminant-analysis-classifier-sda_notune","dir":"Articles","previous_headings":"Searchlight Analysis","what":"Construct an mvpa_model object with a Shrinkage Discriminant Analysis classifier (sda_notune)","title":"Searchlight Analysis","text":"“sda_notune” model sda model lambda parameter estimated training data. See documentation sda package package.","code":"sda_model <- load_model(\"sda_notune\")  model <- mvpa_model(model=sda_model, dataset=dataset$dataset, design=dataset$design, crossval=crossval) model ## mvpa_model object.  ## model:  sda_notune  ## model type:  classification  ##  ##  █▀▀ Blocked Cross-Validation ▀▀█  ##  ## ├─ Dataset Information  ## │  ├─ Observations:  80  ## │  └─ Number of Folds:  4  ## └─ Block Information  ##    ├─ Total Blocks:  4  ##    ├─ Mean Block Size:  20  (SD:  0 )  ##    └─ Block Sizes:  1: 20, 2: 20, 3: 20, 4: 20  ##  ##  ##  █▀▀ MVPA Dataset ▀▀█  ##  ## ├─ Training Data  ## │  ├─ Dimensions:  6 × 6 × 6 × 80 observations  ## │  └─ Type:  DenseNeuroVec  ## ├─ Test Data  ## │  └─  None  ## └─ Mask Information  ##    ├─ Areas:  1 : 120  ##    └─ Active voxels/vertices:  120  ##  ##  ##  █▀▀ MVPA Design ▀▀█  ##  ## ├─ Training Data  ## │  ├─ Observations:  80  ## │  ├─ Response Type:  Factor ## │  ├─ Levels:  a, b  ## │  └─ Class Distribution:  a: 40, b: 40  ## ├─ Test Data  ## │  └─  None  ## └─ Structure  ##    ├─ Blocking:  Present ##    ├─ Number of Blocks:  4  ##    ├─ Mean Block Size:  20  (SD:  0 )  ##    └─ Split Groups:  None"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Searchlight_Analysis.html","id":"run-a-standard-searchlight-analysis","dir":"Articles","previous_headings":"Searchlight Analysis","what":"Run a standard searchlight analysis","title":"Searchlight Analysis","text":"output run_searchlight list image volumes containing performance measures spherical searchlight. two-class classification problem, three output measures: Accuracy AUC (AUC .5 subtracted , centered 0 rather .5). Accuracy raw cross-validated accuracy measure centroid AUC area curve statistic. radius argument indicates radius mm spherical searchlight. Finally, method indicates searchlight scheme, can standard randomized. See information randomized searchlight.","code":"result <- run_searchlight(model, radius=4, method=\"standard\") ## function (model_spec, good_results, bad_results = NULL)   ## [1] \"combiner is \" ## INFO [2025-03-20 21:31:31] Running standard searchlight with radius = 4 ## INFO [2025-03-20 21:31:31] creating standard searchlight ## INFO [2025-03-20 21:31:31] running standard searchlight iterator ## INFO [2025-03-20 21:31:31] ⚡ Processing batch 1/10 ## INFO [2025-03-20 21:31:35] ⚡ Processing batch 2/10 ## INFO [2025-03-20 21:31:37] ⚡ Processing batch 3/10 ## INFO [2025-03-20 21:31:40] ⚡ Processing batch 4/10 ## INFO [2025-03-20 21:31:43] ⚡ Processing batch 5/10 ## INFO [2025-03-20 21:31:46] ⚡ Processing batch 6/10 ## INFO [2025-03-20 21:31:49] ⚡ Processing batch 7/10 ## INFO [2025-03-20 21:31:52] ⚡ Processing batch 8/10 ## INFO [2025-03-20 21:31:54] ⚡ Processing batch 9/10 ## INFO [2025-03-20 21:31:57] ⚡ Processing batch 10/10 ## INFO [2025-03-20 21:31:59]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 120 ## ├─ Processed: 120 ## └─ Skipped: 0 result ##  ##  █▀▀ Searchlight Analysis Results ▀▀█  ##  ## ├─ Coverage  ## │  ├─ Total Voxels:  216  ## │  └─ Active Voxels:  120  ## └─ Performance Metrics  ##    ├─  Accuracy  ##    │  ├─ Mean:  0.4898  ##    │  ├─ SD:  0.0083  ##    │  ├─ Min:  0.4679  ##    │  └─ Max:  0.5118  ##    ├─  AUC  ##    │  ├─ Mean:  -0.0168  ##    │  ├─ SD:  0.0109  ##    │  ├─ Min:  -0.0437  ##    │  └─ Max:  0.0140 hist(result$results$AUC$data)"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Searchlight_Analysis.html","id":"run-a-randomized-searchlight-analysis","dir":"Articles","previous_headings":"","what":"Run a randomized searchlight analysis","title":"Searchlight Analysis","text":"randomized searchlight analysis iterative procedure searchlight regions sampled without replacement voxel set. classification analysis run region, result recorded center voxel voxels region. done niter times, iteration involves exhaustive sampling voxel set. performance voxel average performance set analyses given voxel included feature. result similar standard searchlight procedure, emphasizes contribution given voxel across different local contexts classification performance. principle offer slightly better spatial localization standard searchlight. randomized searchlight procedure can also faster, total number estimated models function nvoxels/radius * niter, smaller nvoxels many choices radius niter.","code":"result <- run_searchlight(model, radius=4, method=\"randomized\", niter=8) ## function (model_spec, good_results, bad_results = NULL)   ## [1] \"combiner is \" ## INFO [2025-03-20 21:32:00] Running randomized searchlight with radius = 4 and niter = 8 ## INFO [2025-03-20 21:32:00] 🔄 Starting randomized searchlight analysis: ## INFO [2025-03-20 21:32:00] ├─ Radius: 4 ## INFO [2025-03-20 21:32:00] └─ Iterations: 8 ## INFO [2025-03-20 21:32:00]  ## 📊 Iteration 1/8 ## INFO [2025-03-20 21:32:00] ⚡ Processing batch 1/3 ## INFO [2025-03-20 21:32:00] ⚡ Processing batch 2/3 ## INFO [2025-03-20 21:32:00] ⚡ Processing batch 3/3 ## INFO [2025-03-20 21:32:01]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## INFO [2025-03-20 21:32:01]  ## 📊 Iteration 2/8 ## INFO [2025-03-20 21:32:01] ⚡ Processing batch 1/3 ## INFO [2025-03-20 21:32:01] ⚡ Processing batch 2/3 ## INFO [2025-03-20 21:32:02] ⚡ Processing batch 3/3 ## INFO [2025-03-20 21:32:02]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## INFO [2025-03-20 21:32:02]  ## 📊 Iteration 3/8 ## INFO [2025-03-20 21:32:02] ⚡ Processing batch 1/3 ## INFO [2025-03-20 21:32:02] ⚡ Processing batch 2/3 ## INFO [2025-03-20 21:32:03] ⚡ Processing batch 3/3 ## INFO [2025-03-20 21:32:03]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## INFO [2025-03-20 21:32:03]  ## 📊 Iteration 4/8 ## INFO [2025-03-20 21:32:03] ⚡ Processing batch 1/4 ## INFO [2025-03-20 21:32:04] ⚡ Processing batch 2/4 ## INFO [2025-03-20 21:32:04] ⚡ Processing batch 3/4 ## INFO [2025-03-20 21:32:04] ⚡ Processing batch 4/4 ## INFO [2025-03-20 21:32:05]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 4 ## ├─ Processed: 4 ## └─ Skipped: 0 ## INFO [2025-03-20 21:32:05]  ## 📊 Iteration 5/8 ## INFO [2025-03-20 21:32:05] ⚡ Processing batch 1/3 ## INFO [2025-03-20 21:32:05] ⚡ Processing batch 2/3 ## INFO [2025-03-20 21:32:05] ⚡ Processing batch 3/3 ## INFO [2025-03-20 21:32:06]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## INFO [2025-03-20 21:32:06]  ## 📊 Iteration 6/8 ## INFO [2025-03-20 21:32:06] ⚡ Processing batch 1/2 ## INFO [2025-03-20 21:32:06] ⚡ Processing batch 2/2 ## INFO [2025-03-20 21:32:07]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 2 ## ├─ Processed: 2 ## └─ Skipped: 0 ## INFO [2025-03-20 21:32:07]  ## 📊 Iteration 7/8 ## INFO [2025-03-20 21:32:07] ⚡ Processing batch 1/3 ## INFO [2025-03-20 21:32:07] ⚡ Processing batch 2/3 ## INFO [2025-03-20 21:32:07] ⚡ Processing batch 3/3 ## INFO [2025-03-20 21:32:08]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## INFO [2025-03-20 21:32:08]  ## 📊 Iteration 8/8 ## INFO [2025-03-20 21:32:08] ⚡ Processing batch 1/3 ## INFO [2025-03-20 21:32:08] ⚡ Processing batch 2/3 ## INFO [2025-03-20 21:32:09] ⚡ Processing batch 3/3 ## INFO [2025-03-20 21:32:09]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 3 ## ├─ Processed: 3 ## └─ Skipped: 0 ## INFO [2025-03-20 21:32:09]  ## ✨ Searchlight Analysis Complete ## INFO [2025-03-20 21:32:09] ├─ Total Models Fit: 24 ## INFO [2025-03-20 21:32:09] └─ All ROIs processed successfully! result ##  ##  █▀▀ Searchlight Analysis Results ▀▀█  ##  ## ├─ Coverage  ## │  ├─ Total Voxels:  216  ## │  └─ Active Voxels:  120  ## └─ Performance Metrics  ##    ├─  Accuracy  ##    │  ├─ Mean:  0.4775  ##    │  ├─ SD:  0.0319  ##    │  ├─ Min:  0.4094  ##    │  └─ Max:  0.5234  ##    ├─  AUC  ##    │  ├─ Mean:  -0.0331  ##    │  ├─ SD:  0.0429  ##    │  ├─ Min:  -0.1187  ##    │  └─ Max:  0.0331 hist(result$results$AUC$data)"},{"path":"http://bbuchsbaum.github.io/rMVPA/articles/Searchlight_Analysis.html","id":"using-different-classifiers","dir":"Articles","previous_headings":"","what":"Using different classifiers","title":"Searchlight Analysis","text":"classifiers available caret package can used (theory) searchlight analysis. example, can run analysis using linear support vector (svmLinear) machine follows: use random forest classifier. fix tuning parameter mtry known value, supply tune_grid argument mvpa_model function. , set mtry 2. Sinc ethere one value, means parameter fixed. supply grid values, paramter tuned searchlight sample. Since parameter tuning costly terms computing time, recommended approach unless one great deal computing power one running searchlight small mask. specify range values mtry tuning parameter. case, supplying tune_reps argument mvpa_model control number resamples used tune model parameters. default 10, speed execution time reducing 2. general, resamples required reliably estimate optimal tuning parameters. means whole-brain searchlight, parameter tuning generally impractical. classifier sda_notune good choice searchlight analyses, since “works well” default tuning parameters.","code":"svm_model <- load_model(\"svmLinear\")  model <- mvpa_model(model=svm_model, dataset=dataset$dataset, design=dataset$design, crossval=crossval) result_svm <- run_searchlight(model, radius=4, method=\"randomized\", niter=2) rf_model <- load_model(\"rf\")  model <- mvpa_model(model=rf_model, dataset=dataset$dataset, design=dataset$design, crossval=crossval, tune_grid=data.frame(mtry=2)) result_rf <- run_searchlight(model, radius=4, method=\"randomized\", niter=2) ## function (model_spec, good_results, bad_results = NULL)   ## [1] \"combiner is \" ## INFO [2025-03-20 21:32:10] Running randomized searchlight with radius = 4 and niter = 2 ## INFO [2025-03-20 21:32:10] 🔄 Starting randomized searchlight analysis: ## INFO [2025-03-20 21:32:10] ├─ Radius: 4 ## INFO [2025-03-20 21:32:10] └─ Iterations: 2 ## INFO [2025-03-20 21:32:10]  ## 📊 Iteration 1/2 ## INFO [2025-03-20 21:32:10] ⚡ Processing batch 1/2 ## INFO [2025-03-20 21:32:10] ⚡ Processing batch 2/2 ## INFO [2025-03-20 21:32:11]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 2 ## ├─ Processed: 2 ## └─ Skipped: 0 ## INFO [2025-03-20 21:32:11]  ## 📊 Iteration 2/2 ## INFO [2025-03-20 21:32:11] ⚡ Processing batch 1/2 ## INFO [2025-03-20 21:32:12] ⚡ Processing batch 2/2 ## INFO [2025-03-20 21:32:12]  ## ✨ MVPA Iteration Complete ## ├─ Total ROIs: 2 ## ├─ Processed: 2 ## └─ Skipped: 0 ## INFO [2025-03-20 21:32:12]  ## ✨ Searchlight Analysis Complete ## INFO [2025-03-20 21:32:12] ├─ Total Models Fit: 4 ## INFO [2025-03-20 21:32:12] └─ All ROIs processed successfully! grid <- data.frame(mtry=c(2,4,6,8)) model2 <- mvpa_model(model=rf_model, dataset=dataset$dataset, design=dataset$design, crossval=crossval, tune_grid=grid, tune_reps=2)  result_rf_tuned <- run_searchlight(model2, radius=6, method=\"randomized\", niter=1)"},{"path":"http://bbuchsbaum.github.io/rMVPA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bradley Buchsbaum. Author, maintainer.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchsbaum B (2025). rMVPA: Multivoxel Pattern Analysis R. R package version 0.1.2, http://bbuchsbaum.github.io/rMVPA/.","code":"@Manual{,   title = {rMVPA: Multivoxel Pattern Analysis in R},   author = {Bradley Buchsbaum},   year = {2025},   note = {R package version 0.1.2},   url = {http://bbuchsbaum.github.io/rMVPA/}, }"},{"path":[]},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/index.html","id":"introduction","dir":"","previous_headings":"Multivoxel Pattern Analysis in R","what":"Introduction","title":"Multivoxel Pattern Analysis in R","text":"rMVPA R library multivariate pattern analysis neuroimaging data. goal library make MVPA analyses easy. can used programmatically within R using command line interface. ‘rMVPA’ leverages ‘caret’ library underlying machine learning interface. rMVPA provides infrastructure conducting machine learning analyses neuroimaging data. Documentation vignettes: https://bbuchsbaum.github.io/rMVPA/","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/index.html","id":"using-devtools","dir":"","previous_headings":"Multivoxel Pattern Analysis in R","what":"Using devtools","title":"Multivoxel Pattern Analysis in R","text":"install rMVPA within R, use devtools function install_github. need development version neuroim2 well. within R:","code":"#library(devtools) install_github(\"bbuchsbaum/neuroim2\") install_github(\"bbuchsbaum/rMVPA\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/index.html","id":"using-git-from-the-command-line","dir":"","previous_headings":"Multivoxel Pattern Analysis in R","what":"Using git from the command line","title":"Multivoxel Pattern Analysis in R","text":"","code":"git clone git@github.com:bbuchsbaum/rMVPA.git R CMD install rMVPA"},{"path":"http://bbuchsbaum.github.io/rMVPA/index.html","id":"optionally-install-command-line-scripts-for-coding-free-mvpa-analysis","dir":"","previous_headings":"Multivoxel Pattern Analysis in R","what":"Optionally install command line scripts for “coding-free” MVPA analysis:","title":"Multivoxel Pattern Analysis in R","text":"wget https://raw.githubusercontent.com/bbuchsbaum/rMVPA/master/scripts/MVPA_Searchlight.R wget https://raw.githubusercontent.com/bbuchsbaum/rMVPA/master/scripts/MVPA_Regional.R , move files folder PATH make executable: chmod +x MVPA_Searchlight.R chmod +x MVPA_Regional.R","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/MVPAModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-defined MVPA Classification Models — MVPAModels","title":"Pre-defined MVPA Classification Models — MVPAModels","text":"environment containing custom classification models MVPA analysis.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/MVPAModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-defined MVPA Classification Models — MVPAModels","text":"","code":"MVPAModels"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/MVPAModels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-defined MVPA Classification Models — MVPAModels","text":"environment following models: corclass Correlation-based classifier using template matching options (pearson, spearman, kendall) corsim Alias corclass sda_notune Shrinkage Discriminant Analysis (SDA) without parameter tuning sda_boot SDA bootstrap resampling feature selection glmnet_opt Elastic net classifier (glmnet) optimized alpha/lambda via EPSGO sparse_sda SDA sparsity constraints feature selection sda_ranking SDA feature ranking selection via higher criticism mgsda Multi-Group Sparse Discriminant Analysis lda_thomaz Modified LDA classifier high-dimensional data hdrda High-Dimensional Regularized Discriminant Analysis","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/MVPAModels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-defined MVPA Classification Models — MVPAModels","text":"Models accessed via load_model(name). implements caret's fit, predict, prob methods.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/MVPAModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-defined MVPA Classification Models — MVPAModels","text":"","code":"# Load simple SDA classifier model <- load_model(\"sda_notune\")  # Load correlation classifier model <- load_model(\"corclass\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/as_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert object to ROI — as_roi","title":"Convert object to ROI — as_roi","text":"Convert provided object ROIVolume ROISurface object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/as_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert object to ROI — as_roi","text":"","code":"as_roi(obj, data, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/as_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert object to ROI — as_roi","text":"obj object converted. data associated data object. ... Additional arguments passed methods.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/as_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert object to ROI — as_roi","text":"ROIVolume ROISurface object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/binary_classification_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Classification results for binary outcome — binary_classification_result","title":"Classification results for binary outcome — binary_classification_result","text":"Constructs binary classification result object based observed predicted values, well optional parameters.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/binary_classification_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classification results for binary outcome — binary_classification_result","text":"","code":"binary_classification_result(   observed,   predicted,   probs,   testind = NULL,   test_design = NULL,   predictor = NULL )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/binary_classification_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classification results for binary outcome — binary_classification_result","text":"observed vector observed true values. predicted vector predicted values. probs matrix predicted probabilities, one column per level. testind row indices test observations (optional). test_design optional design test data. predictor optional predictor object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/binary_classification_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classification results for binary outcome — binary_classification_result","text":"binary classification result object, class attribute set \"binary_classification_result\".","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/classification_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a classification_result instance — classification_result","title":"Create a classification_result instance — classification_result","text":"Constructs classification result object based observed predicted values, well optional parameters.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/classification_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a classification_result instance — classification_result","text":"","code":"classification_result(   observed,   predicted,   probs,   testind = NULL,   test_design = NULL,   predictor = NULL )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/classification_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a classification_result instance — classification_result","text":"observed vector observed true values. predicted vector predicted values. probs matrix predicted probabilities, one column per level. testind row indices test observations (optional). test_design optional design test data. predictor optional predictor object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/classification_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a classification_result instance — classification_result","text":"classification result object, can one : regression_result,   binary_classification_result, multiway_classification_result.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/classification_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a classification_result instance — classification_result","text":"","code":"# A vector of observed values yobs <- factor(rep(letters[1:4], 5))  # Predicted probabilities probs <- data.frame(a = runif(1:20), b = runif(1:20), c = runif(1:20), d = runif(1:20)) probs <- sweep(probs, 1, rowSums(probs), \"/\")  # Get the max probability per row and use this to determine the predicted class maxcol <- max.col(probs) predicted <- levels(yobs)[maxcol]  # Construct a classification result cres <- classification_result(yobs, predicted, probs)  # Compute default performance measures (Accuracy, AUC) performance(cres) #>    Accuracy         AUC  #>  0.20000000 -0.02666667"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/coalesce_join2.html","id":null,"dir":"Reference","previous_headings":"","what":"Coalesce Join Two Data Frames — coalesce_join2","title":"Coalesce Join Two Data Frames — coalesce_join2","text":"function performs specified type join two data frames coalesces joined columns based common column names.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/coalesce_join2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coalesce Join Two Data Frames — coalesce_join2","text":"","code":"coalesce_join2(   x,   y,   by = NULL,   suffix = c(\".x\", \".y\"),   join = dplyr::full_join,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/coalesce_join2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coalesce Join Two Data Frames — coalesce_join2","text":"x data frame joined. y second data frame joined. character vector variables join . NULL (default), function use common column names 'x' 'y'. suffix character vector length 2, specifying suffixes used making unique common column names 'x' 'y'. default c(\".x\", \".y\"). join join function used joining data frames. default dplyr::full_join. ... Additional arguments passed join function.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/coalesce_join2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coalesce Join Two Data Frames — coalesce_join2","text":"data frame resulting specified join operation coalesced columns.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_prediction_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine prediction tables — combine_prediction_tables","title":"Combine prediction tables — combine_prediction_tables","text":"Combines multiple prediction tables (e.g., different models regions) single table. Supports weighted combination collapsing regions.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_prediction_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine prediction tables — combine_prediction_tables","text":"","code":"combine_prediction_tables(   predtabs,   wts = rep(1, length(predtabs)),   collapse_regions = FALSE )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_prediction_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine prediction tables — combine_prediction_tables","text":"predtabs list prediction tables (data frames) combined. wts vector weights, length predtabs. Default equal weights. collapse_regions logical value; TRUE, regions collapsed final prediction table.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_prediction_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine prediction tables — combine_prediction_tables","text":"combined prediction table (data frame).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_prediction_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine prediction tables — combine_prediction_tables","text":"","code":"# Create example prediction tables observed = factor(sample(letters[1:2], 10, replace = TRUE)) predtab1 <- data.frame(.rownum = 1:10,                        roinum = rep(1, 10),                        observed = observed,                        prob_A = runif(10),                        prob_B = runif(10)) predtab2 <- data.frame(.rownum = 1:10,                        roinum = rep(2, 10),                        observed = observed,                        prob_A = runif(10),                        prob_B = runif(10))  # Combine the tables combined_table <- combine_prediction_tables(list(predtab1, predtab2))"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_randomized.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine randomized classifier results — combine_randomized","title":"Combine randomized classifier results — combine_randomized","text":"function combines randomized classifier results good results data frame normalizes performance matrix number instances voxel index.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_randomized.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine randomized classifier results — combine_randomized","text":"","code":"combine_randomized(model_spec, good_results, bad_results = NULL)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_randomized.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine randomized classifier results — combine_randomized","text":"model_spec list containing model specification. good_results data frame containing successful classifier results. bad_results data frame containing unsuccessful classifier results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_randomized.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine randomized classifier results — combine_randomized","text":"list containing combined normalized performance matrix along information dataset.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_rsa_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine RSA standard classifier results — combine_rsa_standard","title":"Combine RSA standard classifier results — combine_rsa_standard","text":"function combines RSA standard classifier results good results data frame binding performance rows together.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_rsa_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine RSA standard classifier results — combine_rsa_standard","text":"","code":"combine_rsa_standard(model_spec, good_results, bad_results)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_rsa_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine RSA standard classifier results — combine_rsa_standard","text":"model_spec list containing model specification. good_results data frame containing successful classifier results. bad_results data frame containing unsuccessful classifier results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_rsa_standard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine RSA standard classifier results — combine_rsa_standard","text":"list containing combined performance matrix along information dataset.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine standard classifier results — combine_standard","title":"Combine standard classifier results — combine_standard","text":"function combines standard classifier results good results data frame binding performance rows together optionally computes observed probabilities.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine standard classifier results — combine_standard","text":"","code":"combine_standard(model_spec, good_results, bad_results)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine standard classifier results — combine_standard","text":"model_spec list containing model specification good_results data frame containing successful classifier results bad_results data frame containing unsuccessful classifier results","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_standard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine standard classifier results — combine_standard","text":"list containing combined performance matrix information","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_vector_rsa_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Vector RSA standard classifier results — combine_vector_rsa_standard","title":"Combine Vector RSA standard classifier results — combine_vector_rsa_standard","text":"function combines Vector RSA standard classifier results good results data frame binding performance rows together.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_vector_rsa_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Vector RSA standard classifier results — combine_vector_rsa_standard","text":"","code":"combine_vector_rsa_standard(model_spec, good_results, bad_results)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_vector_rsa_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Vector RSA standard classifier results — combine_vector_rsa_standard","text":"model_spec list containing model specification. good_results data frame containing successful classifier results. bad_results data frame containing unsuccessful classifier results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/combine_vector_rsa_standard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Vector RSA standard classifier results — combine_vector_rsa_standard","text":"list containing combined performance matrix along information dataset.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/compute_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Performance for an Object — compute_performance","title":"Compute Performance for an Object — compute_performance","text":"Delegates calculation performance metrics appropriate method.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/compute_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Performance for an Object — compute_performance","text":"","code":"compute_performance(obj, result)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/compute_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Performance for an Object — compute_performance","text":"obj input object. result classification/regression result object evaluate.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/compute_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Performance for an Object — compute_performance","text":"list performance metrics.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/create_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Distance Function Object — create_dist","title":"Create a Distance Function Object — create_dist","text":"Constructs generic distance function object, storing: name: name (method) distance (e.g., \"euclidean\", \"cordist\", \"mahalanobis\"). labels: (Optional) vector labels associated data rows. ...: Additional parameters relevant specific distance method         (e.g., correlation method cordist, number components pcadist, etc.).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/create_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Distance Function Object — create_dist","text":"","code":"create_dist(name, labels = NULL, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/create_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Distance Function Object — create_dist","text":"name character string specifying distance method (e.g., \"euclidean\", \"cordist\"). labels vector row labels (optional), primarily informational/reference purposes. ... Additional parameters distance method (e.g. `method=\"pearson\"` correlation, whiten=TRUE PCA-based distances).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/create_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Distance Function Object — create_dist","text":"S3 object class c(name, \"distfun\") can passed pairwise_dist().","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/create_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Distance Function Object — create_dist","text":"object used pairwise_dist() compute N x N matrix pairwise distances rows data matrix. distance function object exclude -block comparisons reorder rows label. tasks (needed) handled downstream (example, second_order_similarity).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/create_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Distance Function Object — create_dist","text":"","code":"# Create a Euclidean distance function object dist_obj_euc <- create_dist(\"euclidean\")  # Create a correlation distance function object with a specified correlation method dist_obj_cor <- create_dist(\"cordist\", method=\"spearman\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/create_searchlight_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a searchlight performance object — create_searchlight_performance","title":"Create a searchlight performance object — create_searchlight_performance","text":"Create searchlight performance object","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/create_searchlight_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a searchlight performance object — create_searchlight_performance","text":"","code":"create_searchlight_performance(dataset, perf_vec, ids = NULL)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/create_searchlight_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a searchlight performance object — create_searchlight_performance","text":"dataset dataset object perf_vec Performance vector single metric ids Optional vector voxel IDs","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/create_searchlight_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a searchlight performance object — create_searchlight_performance","text":"searchlight_performance object","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/cross_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"bootstrap_blocked_cross_validation — bootstrap_blocked_cross_validation","title":"bootstrap_blocked_cross_validation — bootstrap_blocked_cross_validation","text":"Bootstrap Blocked Cross-Validation Specification function constructs cross-validation specification using predefined blocking variable. function constructs cross-validation specification using predefined blocking variable, dividing block specified number folds. function constructs cross-validation specification uses user-supplied set training test indices.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/cross_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bootstrap_blocked_cross_validation — bootstrap_blocked_cross_validation","text":"","code":"bootstrap_blocked_cross_validation(block_var, nreps = 10, weights = NULL)  blocked_cross_validation(block_var)  sequential_blocked_cross_validation(block_var, nfolds = 2, nreps = 4)  custom_cross_validation(sample_set)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/cross_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bootstrap_blocked_cross_validation — bootstrap_blocked_cross_validation","text":"block_var integer vector indicating cross-validation blocks. block indicated unique integer. nreps number repetitions cross-validation procedure. weights numeric vector length `block_var`, representing weights sample. Higher weights indicate observations sampled often. provided, samples treated equally likely. nfolds number folds divide sequence trials within block. sample_set list training test sample indices. element list must named list two elements: \"train\" \"test\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/cross_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bootstrap_blocked_cross_validation — bootstrap_blocked_cross_validation","text":"list containing cross-validation specification, class attributes \"bootstrap_blocked_cross_validation\", \"cross_validation\", \"list\". list containing cross-validation specification, class attributes \"blocked_cross_validation\", \"cross_validation\", \"list\". list containing cross-validation specification, class attributes \"sequential_blocked_cross_validation\", \"cross_validation\", \"list\". list containing custom cross-validation specification, class attributes \"custom_cross_validation\", \"cross_validation\", \"list\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/cross_validation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bootstrap_blocked_cross_validation — bootstrap_blocked_cross_validation","text":"function constructs cross-validation specification using predefined blocking variable creates bootstrap resamples within blocks. function first checks provided weights non-negative normalizes sum 1. constructs list containing block variable, number folds, block indices, number repetitions, weights. output list assigned class `\"bootstrap_blocked_cross_validation\"`, `\"cross_validation\"`, `\"list\"`. function constructs list containing block variable, number folds, block indices. output list assigned class `\"blocked_cross_validation\"`, `\"cross_validation\"`, `\"list\"`. function constructs list containing block variable, number folds, number repetitions, block indices. output list assigned class `\"sequential_blocked_cross_validation\"`, `\"cross_validation\"`, `\"list\"`. custom_cross_validation class allows users define cross-validation structure providing set training test indices. can useful situations standard cross-validation methods (e.g., k-fold, leave-one-) adequately represent desired validation structure. function constructs list containing sample set number folds, derived length sample set. output list assigned class `\"custom_cross_validation\"`, `\"cross_validation\"`, `\"list\"`.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/cross_validation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bootstrap_blocked_cross_validation — bootstrap_blocked_cross_validation","text":"","code":"block_var <- rep(1:5, each=50) weights <- runif(length(block_var)) weights[1] = 0 cval <- bootstrap_blocked_cross_validation(block_var, weights=weights) X <- matrix(rnorm(length(block_var) * 10), length(block_var), 10) y <- rep(letters[1:5], length.out=length(block_var))  sam <- crossval_samples(cval, as.data.frame(X), y) block_var <- rep(1:5, each=50) cval <- blocked_cross_validation(block_var) X <- matrix(rnorm(length(block_var) * 10), length(block_var), 10) y <- rep(letters[1:5], length.out=length(block_var))  sam <- crossval_samples(cval, as.data.frame(X), y) block_var <- rep(1:5, each=50) nfolds <- 2 nreps <- 4 cval <- sequential_blocked_cross_validation(block_var, nfolds, nreps) X <- matrix(rnorm(length(block_var) * 10), length(block_var), 10) y <- rep(letters[1:5], length.out=length(block_var))  sam <- crossval_samples(cval, as.data.frame(X), y) sample_set <- list(   list(train = 1:80, test = 81:100),   list(train = 1:60, test = 61:100),   list(train = 1:40, test = 41:100) ) cval <- custom_cross_validation(sample_set) X <- matrix(rnorm(100 * 10), 100, 10) y <- rep(letters[1:4], length.out=100)  sam <- crossval_samples(cval, as.data.frame(X), y)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Block Cross-Validation Data Preparation — crossv_block","title":"Block Cross-Validation Data Preparation — crossv_block","text":"function prepares data block cross-validation dividing dataset based provided block variable. creates subsets training testing data block without performing analysis fitting models.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block Cross-Validation Data Preparation — crossv_block","text":"","code":"crossv_block(data, y, block_var, id = \".id\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block Cross-Validation Data Preparation — crossv_block","text":"data data frame containing training data. y response vector. block_var integer vector defining cross-validation blocks. id character string specifying identifier output data frame.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block Cross-Validation Data Preparation — crossv_block","text":"tibble containing training testing data, response vectors, block IDs fold.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block Cross-Validation Data Preparation — crossv_block","text":"","code":"X <- data.frame(x1 = rnorm(100), x2 = rnorm(100)) y <- rep(letters[1:4], 25) block_var <- rep(1:4, each = 25) cv <- crossv_block(X, y, block_var)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_bootstrap_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Block Bootstrap Cross-Validation Data Preparation — crossv_bootstrap_block","title":"Block Bootstrap Cross-Validation Data Preparation — crossv_bootstrap_block","text":"function prepares data block bootstrap cross-validation dividing dataset based provided block variable. creates subsets training testing data block using bootstrap sampling within training blocks, without performing analysis fitting models.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_bootstrap_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block Bootstrap Cross-Validation Data Preparation — crossv_bootstrap_block","text":"","code":"crossv_bootstrap_block(   data,   y,   block_var,   nreps = 5,   id = \".id\",   weights = NULL )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_bootstrap_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block Bootstrap Cross-Validation Data Preparation — crossv_bootstrap_block","text":"data data frame containing training data. y response vector. block_var integer vector defining cross-validation blocks. nreps integer specifying number bootstrap repetitions. id character string specifying identifier output data frame. weights optional numeric vector weights used bootstrap sampling.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_bootstrap_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block Bootstrap Cross-Validation Data Preparation — crossv_bootstrap_block","text":"tibble containing training testing data, response vectors, block IDs fold.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_bootstrap_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Block Bootstrap Cross-Validation Data Preparation — crossv_bootstrap_block","text":"function first checks length `block_var` vector matches length response vector `y`. creates list block indices ensures one block bootstrap. weights provided, function splits weights according block variable. function performs bootstrap sampling within training blocks keeps test set fixed. block, generates list training indices using bootstrap sampling creates corresponding training testing data sets.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_k.html","id":null,"dir":"Reference","previous_headings":"","what":"K-fold Cross-Validation Data Preparation — crossv_k","title":"K-fold Cross-Validation Data Preparation — crossv_k","text":"function prepares data k-fold cross-validation dividing dataset k folds. creates subsets training testing data fold without performing analysis fitting models.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-fold Cross-Validation Data Preparation — crossv_k","text":"","code":"crossv_k(data, y, k = 5, id = \".id\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-fold Cross-Validation Data Preparation — crossv_k","text":"data data frame containing training data. y response vector. k integer specifying number folds cross-validation. id character string specifying identifier output data frame.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-fold Cross-Validation Data Preparation — crossv_k","text":"tibble containing training testing data, response vectors, fold IDs fold.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossv_k.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-fold Cross-Validation Data Preparation — crossv_k","text":"","code":"data <- iris[,-5] y <- iris$Species result <- crossv_k(data, y, k = 5)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossval_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"crossval_samples — crossval_samples","title":"crossval_samples — crossval_samples","text":"Apply cross-validation scheme split data training testing sets.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossval_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"crossval_samples — crossval_samples","text":"","code":"crossval_samples(obj, data, y, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossval_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"crossval_samples — crossval_samples","text":"obj cross-validation control object. data data frame containing predictors. y vector containing response variable. ... Extra arguments passed specific cross-validation methods.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/crossval_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"crossval_samples — crossval_samples","text":"tibble containing training testing sets fold.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/custom_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Custom Performance Metric to Prediction Result — custom_performance","title":"Apply Custom Performance Metric to Prediction Result — custom_performance","text":"function applies user-supplied performance metric prediction result object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/custom_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Custom Performance Metric to Prediction Result — custom_performance","text":"","code":"custom_performance(x, custom_fun, split_list = NULL)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/custom_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Custom Performance Metric to Prediction Result — custom_performance","text":"x prediction result object. custom_fun function used compute performance metrics, .e., custom_fun(x). split_list optional named list splitting groups. provided, performance metric computed group returned named vector.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/custom_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Custom Performance Metric to Prediction Result — custom_performance","text":"named vector calculated custom performance metric(s).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/custom_performance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply Custom Performance Metric to Prediction Result — custom_performance","text":"function allows users apply custom performance metric prediction result object. split list provided, performance metric computed group separately, results returned named vector.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/data_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Sample from Dataset — data_sample","title":"Extract Sample from Dataset — data_sample","text":"Extract sample given dataset object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/data_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Sample from Dataset — data_sample","text":"","code":"data_sample(obj, vox, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/data_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Sample from Dataset — data_sample","text":"obj input dataset object. vox voxel indices/coordinates. ... Additional arguments methods.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/data_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Sample from Dataset — data_sample","text":"sample extracted dataset.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/distance-constructors.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Function Constructors — cordist","title":"Distance Function Constructors — cordist","text":"convenience functions build specific types distance function objects via create_dist. returns S3 object inheriting c(\"<method>\", \"distfun\").","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/distance-constructors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Function Constructors — cordist","text":"","code":"cordist(labels = NULL, method = c(\"pearson\", \"spearman\"))  mahadist(labels = NULL)  eucdist(labels = NULL)  robustmahadist(labels = NULL)  pcadist(   labels = NULL,   ncomp = 2,   whiten = TRUE,   threshfun = NULL,   dist_method = c(\"euclidean\", \"manhattan\", \"cosine\") )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/distance-constructors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance Function Constructors — cordist","text":"labels Optional vector row labels (directly used distance calculation). method cordist, correlation method: \"pearson\" \"spearman\". ncomp pcadist, number components (function threshold). whiten pcadist, whether whiten principal components (logical). threshfun pcadist, optional function determines many PCs retain based pres$sdev^2. dist_method pcadist, base distance measure PC space (\"euclidean\", \"manhattan\", \"cosine\").","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/distance-constructors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance Function Constructors — cordist","text":"S3 object class c(\"<method>\", \"distfun\").","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/distance-constructors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance Function Constructors — cordist","text":"- cordist(labels, method=\"pearson\") → correlation-based distance. - mahadist(labels) → Mahalanobis distance. - eucdist(labels) → Euclidean distance. - robustmahadist(labels) → Mahalanobis distance using robust covariance. - pcadist(labels, ...) → distance reduced PCA space.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/distance-constructors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance Function Constructors — cordist","text":"","code":"dist_obj_1 <- cordist(method=\"pearson\") dist_obj_2 <- mahadist() dist_obj_3 <- eucdist() dist_obj_4 <- robustmahadist() dist_obj_5 <- pcadist(ncomp=2, dist_method=\"cosine\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/do_merge_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge searchlight results — do_merge_results","title":"Merge searchlight results — do_merge_results","text":"function merges searchlight results, combining first result rest results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/do_merge_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge searchlight results — do_merge_results","text":"","code":"do_merge_results(r1, good_results)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/do_merge_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge searchlight results — do_merge_results","text":"r1 list indices representing searchlight results merged. good_results data frame containing valid searchlight results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/do_merge_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge searchlight results — do_merge_results","text":"combined searchlight result object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/do_randomized.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform randomized searchlight analysis — do_randomized","title":"Perform randomized searchlight analysis — do_randomized","text":"function performs randomized searchlight analysis using specified model, radius, number iterations. can customized different MVPA functions, combiners, permutation options.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/do_randomized.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform randomized searchlight analysis — do_randomized","text":"","code":"do_randomized(   model_spec,   radius,   niter,   mvpa_fun = mvpa_iterate,   combiner = pool_randomized,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/do_randomized.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform randomized searchlight analysis — do_randomized","text":"model_spec object specifying model used searchlight analysis. radius radius searchlight sphere. niter number iterations randomized searchlight. mvpa_fun MVPA function used searchlight analysis (default mvpa_iterate). combiner function used combine results (default pool_randomized). ... Additional arguments passed MVPA function.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/do_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform standard searchlight analysis — do_standard","title":"Perform standard searchlight analysis — do_standard","text":"function performs standard searchlight analysis using specified model radius. can customized different MVPA functions, combiners, permutation options.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/do_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform standard searchlight analysis — do_standard","text":"","code":"do_standard(   model_spec,   radius,   mvpa_fun = mvpa_iterate,   combiner = combine_standard,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/do_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform standard searchlight analysis — do_standard","text":"model_spec object specifying model used searchlight analysis. radius radius searchlight sphere. mvpa_fun MVPA function used searchlight analysis (default mvpa_iterate). combiner function used combine results (default combine_standard). ... Additional arguments passed MVPA function.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/evaluate_model.feature_rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Method for Feature RSA Model — evaluate_model.feature_rsa_model","title":"Evaluate Method for Feature RSA Model — evaluate_model.feature_rsa_model","text":"Evaluate Method Feature RSA Model","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/evaluate_model.feature_rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Method for Feature RSA Model — evaluate_model.feature_rsa_model","text":"","code":"evaluate_model.feature_rsa_model(object, predicted, observed, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/evaluate_model.feature_rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Method for Feature RSA Model — evaluate_model.feature_rsa_model","text":"object feature RSA model predicted Predicted brain activity (X) [nObs x nVox] observed Observed brain activity (X) [nObs x nVox] ... Additional args","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/evaluate_model.feature_rsa_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Method for Feature RSA Model — evaluate_model.feature_rsa_model","text":"Performance metrics","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_rsa_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Feature-Based RSA Design — feature_rsa_design","title":"Create a Feature-Based RSA Design — feature_rsa_design","text":"Creates design feature-based Representational Similarity Analysis (RSA). can either supply similarity matrix S (optionally select dimensions) directly supply feature matrix F.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_rsa_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Feature-Based RSA Design — feature_rsa_design","text":"","code":"feature_rsa_design(S = NULL, F = NULL, labels, k = 0, max_comps = 10)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_rsa_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Feature-Based RSA Design — feature_rsa_design","text":"S symmetric similarity matrix representing feature space relationships. NULL, must supply F. F feature space matrix (observations features). supplied, overrides S k. labels Vector labels corresponding rows/columns S observations F. k Integer specifying number feature dimensions retain using S. 0 (default), automatically determines dimensions using eigenvalue threshold > 1. max_comps Maximum number components use (PCA/PLS/SCCA). Default 10.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_rsa_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Feature-Based RSA Design — feature_rsa_design","text":"feature_rsa_design object (S3 class) containing: S input similarity matrix (used) F Feature space projection matrix labels Vector observation labels k number feature dimensions max_comps Maximum number components method","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_rsa_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Feature-Based RSA Design — feature_rsa_design","text":"F supplied directly, used -. S supplied, design computes eigen decomposition S (keeping factors eigenvalue > 1, unless specify k).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Feature-Based RSA Model — feature_rsa_model","title":"Create a Feature-Based RSA Model — feature_rsa_model","text":"Creates model feature-based Representational Similarity Analysis (RSA) relates neural patterns (X) predefined feature space (F).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Feature-Based RSA Model — feature_rsa_model","text":"","code":"feature_rsa_model(   dataset,   design,   method = c(\"scca\", \"pls\", \"pca\"),   crossval = NULL,   cache_pca = FALSE )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Feature-Based RSA Model — feature_rsa_model","text":"dataset mvpa_dataset object containing neural data (X). design feature_rsa_design object specifying feature space (F). method Character string specifying analysis method. One : scca Sparse Canonical Correlation Analysis pls Partial Least Squares pca Principal Component Analysis feature space crossval Optional cross-validation specification.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_rsa_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Feature-Based RSA Model — feature_rsa_model","text":"feature_rsa_model object (S3 class).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_rsa_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Feature-Based RSA Model — feature_rsa_model","text":"Feature RSA models analyze well feature matrix F can predict neural data X. example:   - pca: PCA F, regress X principal components.   - pls: partial least squares regression X F.   - scca: sparse CCA X F.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Selection Methods — feature_selection","title":"Feature Selection Methods — feature_selection","text":"Feature Selection Methods","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_selection.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Feature Selection Methods — feature_selection","text":"Two feature selection methods available: FTest One-way ANOVA F-test feature catscore Correlation-adjusted t-scores using sda.ranking","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_selection.html","id":"cutoff-types","dir":"Reference","previous_headings":"","what":"Cutoff Types","title":"Feature Selection Methods — feature_selection","text":"Two types cutoffs supported: top_k/topk Select top k features top_p/topp Select top p percent features (0 < p <= 1)","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_selector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a feature selection specification — feature_selector","title":"Create a feature selection specification — feature_selector","text":"function creates feature selection specification using provided method, cutoff type, cutoff value.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_selector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a feature selection specification — feature_selector","text":"","code":"feature_selector(method, cutoff_type, cutoff_value)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_selector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a feature selection specification — feature_selector","text":"method type feature selection method use. Supported methods \"FTest\" \"catscore\". cutoff_type type threshold used select features. Supported cutoff types \"top_k\" \"top_p\". cutoff_value numeric value threshold cutoff.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_selector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a feature selection specification — feature_selector","text":"list class name equal method argument.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_selector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a feature selection specification — feature_selector","text":"available feature selection methods :   - FTest: Computes one-way ANOVA every column feature matrix.   - catscore: Computes correlation adjusted t-test every column matrix using sda.ranking sda package.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/feature_selector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a feature selection specification — feature_selector","text":"","code":"fsel <- feature_selector(\"FTest\", \"top_k\", 1000) fsel <- feature_selector(\"FTest\", \"top_p\", .1) class(fsel) == \"FTest\" #> [1]  TRUE FALSE FALSE"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/filter_roi.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Region of Interest (ROI) — filter_roi","title":"Filter Region of Interest (ROI) — filter_roi","text":"Filter ROI removing columns missing values zero std dev.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/filter_roi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Region of Interest (ROI) — filter_roi","text":"","code":"filter_roi(roi, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/filter_roi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Region of Interest (ROI) — filter_roi","text":"roi list containing train test ROI data. ... Additional arguments passed methods.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/filter_roi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Region of Interest (ROI) — filter_roi","text":"list filtered train test ROI data.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Model — fit_model","title":"Fit Model — fit_model","text":"Fit classification regression model.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Model — fit_model","text":"","code":"fit_model(   obj,   roi_x,   y,   wts,   param,   lev = NULL,   last = FALSE,   classProbs = FALSE,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Model — fit_model","text":"obj model fitting object. roi_x ROI containing training data. y response vector. wts set case weights. param Tuning parameters. lev Factor levels (classification). last Logical indicating last iteration. classProbs Logical indicating class probabilities returned. ... Additional arguments passed method-specific function.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/format_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Result Object — format_result","title":"Format Result Object — format_result","text":"Format Result Object","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/format_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Result Object — format_result","text":"","code":"format_result(obj, result, error_message, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/format_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Result Object — format_result","text":"obj result object formatted. result result object formatted. error_message optional error message. ... Additional arguments passed method-specific function.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/gen_sample_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Sample Dataset for MVPA Analysis — gen_sample_dataset","title":"Generate Sample Dataset for MVPA Analysis — gen_sample_dataset","text":"Creates synthetic dataset testing demonstration MVPA analyses.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/gen_sample_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Sample Dataset for MVPA Analysis — gen_sample_dataset","text":"","code":"gen_sample_dataset(   D,   nobs,   response_type = c(\"categorical\", \"continuous\"),   data_mode = c(\"image\", \"surface\"),   spacing = c(1, 1, 1),   blocks = 5,   nlevels = 5,   external_test = FALSE,   ntest_obs = nobs,   split_by = NULL,   na_cols = 0 )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/gen_sample_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Sample Dataset for MVPA Analysis — gen_sample_dataset","text":"D data dimension(s): vector length 2 3 image data, single number surface data nobs number observations response_type Either 'categorical' 'continuous' data_mode Either 'image' 'surface' spacing voxel spacing (default: c(1,1,1)) blocks number 'blocks' data (cross-validation) nlevels number category levels (used response_type='categorical') external_test Whether generate external test set ntest_obs number test observations (default: nobs) split_by Optional factor splitting analyses na_cols number columns randomly set NA (default: 0)","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/gen_sample_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Sample Dataset for MVPA Analysis — gen_sample_dataset","text":"list containing: dataset mvpa_dataset object containing: train_data: Training data NeuroVec ROISurface test_data: Test data (external_test=TRUE) mask: Binary mask indicating valid voxels/vertices  design mvpa_design object containing: y_train: Response variable training y_test: Response variable test set (external_test=TRUE) block_var: Block variable cross-validation split_by: Optional splitting factor","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/gen_sample_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Sample Dataset for MVPA Analysis — gen_sample_dataset","text":"","code":"# Generate categorical image dataset dataset <- gen_sample_dataset(   D = c(10,10,10),   nobs = 100,   response_type = \"categorical\",   data_mode = \"image\",   blocks = 3,   nlevels = 2 )  # Generate continuous surface dataset surf_data <- gen_sample_dataset(   D = 1000,  # number of vertices   nobs = 50,   response_type = \"continuous\",   data_mode = \"surface\" ) #> loading /home/runner/work/_temp/Library/neurosurf/extdata/std.8_lh.inflated.asc  # Generate dataset with external test set test_dataset <- gen_sample_dataset(   D = c(8,8,8),   nobs = 80,   response_type = \"categorical\",   nlevels = 3,   external_test = TRUE ) #> external test"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Multiple Data Samples — get_samples","title":"Get Multiple Data Samples — get_samples","text":"Extract multiple data samples based list voxel/index sets dataset object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Multiple Data Samples — get_samples","text":"","code":"get_samples(obj, vox_list)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Multiple Data Samples — get_samples","text":"obj input dataset object. vox_list list vectors containing voxel indices extract.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Multiple Data Samples — get_samples","text":"list data samples.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_searchlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Searchlight Iterator — get_searchlight","title":"Generate Searchlight Iterator — get_searchlight","text":"Generate searchlight iterator suitable given data.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_searchlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Searchlight Iterator — get_searchlight","text":"","code":"get_searchlight(obj, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_searchlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Searchlight Iterator — get_searchlight","text":"obj input dataset object. ... Additional arguments methods.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_searchlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Searchlight Iterator — get_searchlight","text":"searchlight iterator object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_unique_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Unique Region IDs — get_unique_regions","title":"Get Unique Region IDs — get_unique_regions","text":"Extract unique region IDs region mask, handling volume surface data.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_unique_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Unique Region IDs — get_unique_regions","text":"","code":"get_unique_regions(region_mask, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_unique_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Unique Region IDs — get_unique_regions","text":"region_mask region mask object (NeuroVol NeuroSurface) ... Additional arguments passed methods","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/get_unique_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Unique Region IDs — get_unique_regions","text":"sorted vector unique region IDs greater 0","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/group_means.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Group Means of a Matrix — group_means","title":"Compute Group Means of a Matrix — group_means","text":"function calculates average vector level grouping variable given matrix.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/group_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Group Means of a Matrix — group_means","text":"","code":"group_means(X, margin, group)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/group_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Group Means of a Matrix — group_means","text":"X matrix group means calculated. margin integer specifying margin average . Use 1 averaging rows, 2 averaging columns. group grouping variable, either factor integer vector, defines groups calculate means .","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/group_means.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Group Means of a Matrix — group_means","text":"matrix number rows columns (depending margin) input matrix X, number columns rows corresponding number unique groups grouping variable.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/group_means.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Group Means of a Matrix — group_means","text":"","code":"# Create a random matrix data <- matrix(rnorm(100 * 100), 100, 100)  # Define a grouping variable groups <- factor(rep(1:5, each = 20))  # Calculate group means for each row row_means <- group_means(data, margin = 1, group = groups)  # Calculate group means for each column col_means <- group_means(data, margin = 2, group = groups)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/has_crossval.html","id":null,"dir":"Reference","previous_headings":"","what":"Requires cross-validation to be performed — has_crossval","title":"Requires cross-validation to be performed — has_crossval","text":"Requires cross-validation performed","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/has_crossval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Requires cross-validation to be performed — has_crossval","text":"","code":"has_crossval(obj)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/has_crossval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Requires cross-validation to be performed — has_crossval","text":"obj model object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/has_test_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Set Availability — has_test_set","title":"Test Set Availability — has_test_set","text":"Check object test set available.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/has_test_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Set Availability — has_test_set","text":"","code":"has_test_set(obj)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/has_test_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Set Availability — has_test_set","text":"obj object check test set.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/kfold_cross_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"kfold_cross_validation — kfold_cross_validation","title":"kfold_cross_validation — kfold_cross_validation","text":"Construct cross-validation specification randomly partitions input set nfolds folds.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/kfold_cross_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kfold_cross_validation — kfold_cross_validation","text":"","code":"kfold_cross_validation(len, nfolds = 10)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/kfold_cross_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kfold_cross_validation — kfold_cross_validation","text":"len integer representing number observations. nfolds integer specifying number cross-validation folds.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/kfold_cross_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kfold_cross_validation — kfold_cross_validation","text":"object class \"kfold_cross_validation\", \"cross_validation\", \"list\" containing block_var nfolds.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/kfold_cross_validation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kfold_cross_validation — kfold_cross_validation","text":"function creates k-fold cross-validation scheme cases data needs split specified number folds evaluation. returns object class \"kfold_cross_validation\", \"cross_validation\", \"list\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/kfold_cross_validation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"kfold_cross_validation — kfold_cross_validation","text":"","code":"cval <- kfold_cross_validation(len=100, nfolds=10) samples <- crossval_samples(cval, data=as.data.frame(matrix(rnorm(100*10), 100, 10)), y=rep(letters[1:5],20)) stopifnot(nrow(samples) == 10)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/load_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a Pre-defined MVPA Model — load_model","title":"Load a Pre-defined MVPA Model — load_model","text":"Retrieves model specification either pre-defined set MVPA models caret's model library.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/load_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a Pre-defined MVPA Model — load_model","text":"","code":"load_model(name)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/load_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a Pre-defined MVPA Model — load_model","text":"name Character string specifying model load. Can either: pre-defined MVPA model name: corclass Correlation-based classifier template matching sda_notune Simple Shrinkage Discriminant Analysis without tuning sda_boot SDA bootstrap resampling glmnet_opt Elastic net EPSGO parameter optimization sparse_sda SDA sparsity constraints sda_ranking SDA automatic feature ranking mgsda Multi-Group Sparse Discriminant Analysis lda_thomaz Modified LDA high-dimensional data hdrda High-Dimensional Regularized Discriminant Analysis valid model name caret's model library (e.g., \"rf\" random forest, \"svmRadial\" SVM)","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/load_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a Pre-defined MVPA Model — load_model","text":"list containing model specification following components: type Model type: \"Classification\" \"Regression\" library Required R package(s) model label Human-readable model name parameters Data frame describing tunable parameters grid Function generate parameter tuning grid fit Function fit model predict Function generate predictions prob Function generate class probabilities (classification )","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/load_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a Pre-defined MVPA Model — load_model","text":"","code":"# Load custom MVPA model model <- load_model(\"sda_notune\")  # Load correlation classifier with parameter tuning options corr_model <- load_model(\"corclass\") print(corr_model$parameters)  # View tunable parameters #>   parameters     class                                           label #> 1     method character correlation type: pearson, spearman, or kendall #> 2     robust   logical                                   mean or huber  # Load caret's random forest model rf_model <- load_model(\"rf\") print(rf_model$parameters)  # View RF parameters #>   parameter   class                         label #> 1      mtry numeric #Randomly Selected Predictors  # Load caret's SVM model svm_model <- load_model(\"svmRadial\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a MANOVA Design — manova_design","title":"Create a MANOVA Design — manova_design","text":"function creates MANOVA design object containing formula expression named list data.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a MANOVA Design — manova_design","text":"","code":"manova_design(formula, data)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a MANOVA Design — manova_design","text":"formula formula expression specifying MANOVA regression model. data named list containing dissimilarity matrices auxiliary variables.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a MANOVA Design — manova_design","text":"MANOVA design object class attributes \"manova_design\" \"list\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a MANOVA Design — manova_design","text":"function takes formula expression named list data input, returns MANOVA design object. object list contains formula expression named list data class attributes \"manova_design\" \"list\". object can used MANOVA analysis related multivariate statistical methods.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a MANOVA Design — manova_design","text":"","code":"# Create a MANOVA design formula <- y ~ x1 + x2 data_list <- list(y = dissimilarity_matrix_y, x1 = dissimilarity_matrix_x1, x2 = dissimilarity_matrix_x2) #> Error: object 'dissimilarity_matrix_y' not found manova_design_obj <- manova_design(formula, data_list) #> Error: object 'data_list' not found"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a MANOVA Model — manova_model","title":"Create a MANOVA Model — manova_model","text":"function creates MANOVA model object containing `mvpa_dataset` instance `manova_design` instance.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a MANOVA Model — manova_model","text":"","code":"manova_model(dataset, design)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a MANOVA Model — manova_model","text":"dataset mvpa_dataset instance. design manova_design instance.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a MANOVA Model — manova_model","text":"MANOVA model object class attributes \"manova_model\" \"list\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a MANOVA Model — manova_model","text":"function takes `mvpa_dataset` instance `manova_design` instance input, returns MANOVA model object. object list contains dataset design class attributes \"manova_model\" \"list\". object can used multivariate statistical analysis using MANOVA method.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/manova_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a MANOVA Model — manova_model","text":"","code":"# Create a MANOVA model dataset <- create_mvpa_dataset(data_matrix, labels, subject_ids) #> Error in create_mvpa_dataset(data_matrix, labels, subject_ids): could not find function \"create_mvpa_dataset\" formula <- y ~ x1 + x2 data_list <- list(y = dissimilarity_matrix_y, x1 = dissimilarity_matrix_x1, x2 = dissimilarity_matrix_x2) #> Error: object 'dissimilarity_matrix_y' not found design <- manova_design(formula, data_list) #> Error: object 'data_list' not found manova_model_obj <- manova_model(dataset, design) #> Error: object 'dataset' not found"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_classif_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Multiple Classification/Regression Results — merge_classif_results","title":"Merge Multiple Classification/Regression Results — merge_classif_results","text":"function merges two classification/regression result objects.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_classif_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Multiple Classification/Regression Results — merge_classif_results","text":"","code":"merge_classif_results(x, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_classif_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Multiple Classification/Regression Results — merge_classif_results","text":"x first classification/regression result object. ... Additional classification/regression result objects.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_classif_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Multiple Classification/Regression Results — merge_classif_results","text":"single merged classification/regression result object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Predictions — merge_predictions","title":"Merge Predictions — merge_predictions","text":"Combine predictions multiple models test set.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Predictions — merge_predictions","text":"","code":"merge_predictions(obj1, rest, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Predictions — merge_predictions","text":"obj1 first object containing predictions. rest objects containing predictions. ... Additional arguments.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Predictions — merge_predictions","text":"combined object merged predictions.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Multiple Results — merge_results","title":"Merge Multiple Results — merge_results","text":"Merge Multiple Results","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Multiple Results — merge_results","text":"","code":"merge_results(obj, result_set, indices, id, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Multiple Results — merge_results","text":"obj base object containing merge specifications result_set List results merged indices List indices corresponding result id Identifier merged result ... Additional arguments passed specific merge methods","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Multiple Results — merge_results","text":"merged result object containing: Combined results input objects Associated indices Merged metadata","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_results.regional_mvpa_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge regional MVPA results — merge_results.regional_mvpa_result","title":"Merge regional MVPA results — merge_results.regional_mvpa_result","text":"Merge multiple regional MVPA results single result.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_results.regional_mvpa_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge regional MVPA results — merge_results.regional_mvpa_result","text":"","code":"# S3 method for class 'regional_mvpa_result' merge_results(x, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_results.regional_mvpa_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge regional MVPA results — merge_results.regional_mvpa_result","text":"x regional_mvpa_result object. ... Additional regional_mvpa_result objects merged.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/merge_results.regional_mvpa_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge regional MVPA results — merge_results.regional_mvpa_result","text":"merged regional_mvpa_result object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/multiway_classification_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Multiway Classification Result Object — multiway_classification_result","title":"Create a Multiway Classification Result Object — multiway_classification_result","text":"function creates multiway classification result object containing observed predicted values, class probabilities, test design, test indices, predictor.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/multiway_classification_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Multiway Classification Result Object — multiway_classification_result","text":"","code":"multiway_classification_result(   observed,   predicted,   probs,   testind = NULL,   test_design = NULL,   predictor = NULL )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/multiway_classification_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Multiway Classification Result Object — multiway_classification_result","text":"observed vector observed values. predicted vector predicted values. probs matrix class probabilities. testind vector indices test data (optional). test_design test design (optional). predictor predictor used multiway classification model (optional).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/multiway_classification_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Multiway Classification Result Object — multiway_classification_result","text":"list class attributes \"multiway_classification_result\", \"classification_result\", \"list\" containing observed predicted values, class probabilities, test design, test indices, predictor.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an MVPA Dataset Object — mvpa_dataset","title":"Create an MVPA Dataset Object — mvpa_dataset","text":"Creates dataset object MVPA analysis encapsulates training dataset, optional test dataset, voxel mask.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an MVPA Dataset Object — mvpa_dataset","text":"","code":"mvpa_dataset(train_data, test_data = NULL, mask)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an MVPA Dataset Object — mvpa_dataset","text":"train_data training data set: NeuroVec instance test_data Optional test data set: NeuroVec instance (default: NULL) mask set voxels include: NeuroVol instance","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an MVPA Dataset Object — mvpa_dataset","text":"mvpa_dataset object (S3 class) containing: train_data training data NeuroVec instance test_data test data NeuroVec instance (provided, otherwise NULL) mask binary mask defining valid voxels NeuroVol instance","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an MVPA Dataset Object — mvpa_dataset","text":"","code":"# Create dataset from NeuroVec objects train_vec <- NeuroVec(array(rnorm(1000*100), c(10,10,10,100))) #> Error in NeuroVec(array(rnorm(1000 * 100), c(10, 10, 10, 100))): could not find function \"NeuroVec\" mask_vol <- NeuroVol(array(1, c(10,10,10))) #> Error in NeuroVol(array(1, c(10, 10, 10))): could not find function \"NeuroVol\" dataset <- mvpa_dataset(train_vec, mask=mask_vol) #> Error: object 'train_vec' not found  # Create dataset with test data test_vec <- NeuroVec(array(rnorm(1000*20), c(10,10,10,20))) #> Error in NeuroVec(array(rnorm(1000 * 20), c(10, 10, 10, 20))): could not find function \"NeuroVec\" dataset_with_test <- mvpa_dataset(train_vec, test_vec, mask=mask_vol) #> Error: object 'train_vec' not found"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an MVPA Design Object — mvpa_design","title":"Create an MVPA Design Object — mvpa_design","text":"Creates design object MVPA analysis encapsulates training testing designs, response variables, optional blocking splitting factors.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an MVPA Design Object — mvpa_design","text":"","code":"mvpa_design(   train_design,   test_design = NULL,   y_train,   y_test = NULL,   block_var = NULL,   split_by = NULL,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an MVPA Design Object — mvpa_design","text":"train_design data frame containing training design matrix test_design Optional data frame containing test design matrix (default: NULL) y_train Formula vector specifying training response variable y_test Optional formula vector specifying test response variable (default: NULL) block_var Optional formula vector specifying blocking variable cross-validation split_by Optional formula vector splitting analyses ... Additional arguments (currently unused)","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an MVPA Design Object — mvpa_design","text":"mvpa_design object (S3 class) containing: train_design Data frame training design test_design Data frame test design (provided) y_train Training response variable y_test Test response variable (provided) block_var Blocking variable cross-validation (provided) split_by Splitting factor (provided)","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an MVPA Design Object — mvpa_design","text":"y_train y_test can specified either formulas (e.g., ~ condition) vectors. formulas used, evaluated within respective design matrices. block_var split_by can also specified formulas vectors. formulas, evaluated within training design matrix.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an MVPA Design Object — mvpa_design","text":"","code":"# Basic design with only training data train_df <- data.frame(condition = rep(c(\"A\", \"B\"), each = 50),                        block = rep(1:5, each = 20),                        group = rep(c(\"Group1\", \"Group2\"), 50)) design <- mvpa_design(train_df, y_train = ~ condition)  # Design with test data and blocking variable test_df <- data.frame(condition = rep(c(\"A\", \"B\"), each = 25)) design_with_test <- mvpa_design(   train_df,    test_df,    y_train = ~ condition,    y_test = ~ condition,   block_var = ~ block )  # Design with split_by factor design_split <- mvpa_design(   train_df,    y_train = ~ condition,   split_by = ~ group )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_iterate.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterate MVPA Analysis Over Multiple ROIs — mvpa_iterate","title":"Iterate MVPA Analysis Over Multiple ROIs — mvpa_iterate","text":"Performs multivariate pattern analysis (MVPA) across multiple regions interest (ROIs) using batch processing parallel computation.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_iterate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterate MVPA Analysis Over Multiple ROIs — mvpa_iterate","text":"","code":"mvpa_iterate(   mod_spec,   vox_list,   ids = 1:length(vox_list),   batch_size = as.integer(0.1 * length(ids)),   verbose = TRUE,   processor = NULL )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_iterate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterate MVPA Analysis Over Multiple ROIs — mvpa_iterate","text":"mod_spec MVPA model specification object containing dataset analyze, compute_performance (logical indicating whether compute performance metrics), return_predictions (logical indicating whether return predictions). vox_list list voxel indices coordinates defining ROI analyze. ids Vector identifiers ROI analysis. Defaults 1:length(vox_list). batch_size Integer specifying number ROIs process per batch. Defaults 10% total ROIs. verbose Logical indicating whether print progress messages. Defaults TRUE. processor Optional custom processing function. NULL, uses default processor. Must accept parameters (obj, roi, rnum) return tibble.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_iterate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterate MVPA Analysis Over Multiple ROIs — mvpa_iterate","text":"tibble containing results ROI columns: result List column analysis results (NULL return_predictions=FALSE). indices List column ROI indices used. performance List column performance metrics (computed). id ROI identifier. error Logical indicating error occurred. error_message Error message applicable. warning Logical indicating warning occurred. warning_message Warning message applicable.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_iterate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterate MVPA Analysis Over Multiple ROIs — mvpa_iterate","text":"function processes ROIs batches manage memory usage. batch: Extracts ROI data dataset. Filters ROIs fewer 2 voxels. Processes ROI using either default custom processor. Combines results across batches.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an MVPA Model — mvpa_model","title":"Create an MVPA Model — mvpa_model","text":"Create MVPA model based caret-based classification regression model.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an MVPA Model — mvpa_model","text":"","code":"mvpa_model(   model,   dataset,   design,   model_type = c(\"classification\", \"regression\"),   crossval = NULL,   feature_selector = NULL,   tune_grid = NULL,   tune_reps = 15,   performance = NULL,   class_metrics = TRUE,   compute_performance = TRUE,   return_predictions = TRUE,   return_fits = FALSE )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an MVPA Model — mvpa_model","text":"model caret-based classification regression model. dataset `mvpa_dataset` instance. design `mvpa_design` instance. model_type character string indicating problem type: \"classification\" \"regression\". crossval optional `cross_validation` instance. feature_selector optional `feature_selector` instance. tune_grid optional parameter tuning grid `data.frame`. tune_reps number replications used parameter tuning. relevant `tune_grid` supplied. performance optional custom function computing performance metrics. class_metrics logical flag indicating whether compute performance metrics class. compute_performance logical indicating whether compute store performance measures voxel set (defaults TRUE). return_predictions logical indicating whether return row-wise predictions voxel set (defaults TRUE). return_fits logical indicating whether return model fit voxel set (defaults FALSE).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an MVPA Model — mvpa_model","text":"`performance` supplied, must function takes one argument returns named list scalar values. argument function takes class deriving `classification_result` appropriate problem hand. See example .","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an MVPA Model — mvpa_model","text":"","code":"mod <- load_model(\"sda\") traindat <- neuroim2::NeuroVec(array(rnorm(6*6*6*100), c(6,6,6,100)), neuroim2::NeuroSpace(c(6,6,6,100))) mask <- neuroim2::LogicalNeuroVol(array(rnorm(6*6*6)>-.2, c(6,6,6)), neuroim2::NeuroSpace(c(6,6,6)))  mvdset <- mvpa_dataset(traindat,mask=mask) design <- data.frame(fac=rep(letters[1:4], 25), block=rep(1:10, each=10)) cval <- blocked_cross_validation(design$block) mvdes <- mvpa_design(design, ~ fac, block_var=~block) #> Error in mvpa_design(design, ~fac, block_var = ~block): argument \"y_train\" is missing, with no default  custom_perf <- function(result) {   c(accuracy=sum(result$observed == result$predicted)/length(result$observed)) } mvpmod <- mvpa_model(mod, dataset=mvdset, design=mvdes, crossval=cval, performance=custom_perf) #> Error: object 'mvdes' not found ret <- run_searchlight(mvpmod) #> Error: object 'mvpmod' not found stopifnot(\"accuracy\" %in% names(ret)) #> Error: object 'ret' not found"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_surface_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Surface-Based MVPA Dataset Object — mvpa_surface_dataset","title":"Create a Surface-Based MVPA Dataset Object — mvpa_surface_dataset","text":"Creates dataset object surface-based MVPA analysis encapsulates training dataset, optional test dataset, vertex mask.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_surface_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Surface-Based MVPA Dataset Object — mvpa_surface_dataset","text":"","code":"mvpa_surface_dataset(train_data, test_data = NULL, mask = NULL, name = \"\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_surface_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Surface-Based MVPA Dataset Object — mvpa_surface_dataset","text":"train_data training data set: must inherit NeuroSurfaceVector test_data Optional test data set: must inherit NeuroSurfaceVector (default: NULL) mask Optional binary mask vertices. NULL, creates mask training data indices name Optional label identify dataset (e.g., \"lh\" \"rh\" indicate hemisphere)","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_surface_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Surface-Based MVPA Dataset Object — mvpa_surface_dataset","text":"mvpa_surface_dataset object (S3 class) containing: train_data training data NeuroSurfaceVector instance test_data test data NeuroSurfaceVector instance (provided) mask numeric vector indicating valid vertices (1) excluded vertices (0) name Character string identifier dataset","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_surface_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Surface-Based MVPA Dataset Object — mvpa_surface_dataset","text":"mask provided, one created automatically using indices training data. mask numeric vector length equal number nodes surface geometry.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/mvpa_surface_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Surface-Based MVPA Dataset Object — mvpa_surface_dataset","text":"","code":"if (FALSE) { # \\dontrun{ # Create surface dataset with automatic mask train_surf <- NeuroSurfaceVector(geometry, data) dataset <- mvpa_surface_dataset(train_surf, name=\"lh\")  # Create dataset with test data and custom mask test_surf <- NeuroSurfaceVector(geometry, test_data) mask <- numeric(length(nodes(geometry))) mask[roi_indices] <- 1 dataset <- mvpa_surface_dataset(train_surf, test_surf, mask, name=\"rh\") } # }"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/new-analysis-overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Extending the MVPA Framework: Creating a New Analysis Type — new-analysis-overview","title":"Extending the MVPA Framework: Creating a New Analysis Type — new-analysis-overview","text":"documentation describes implement **new MVPA analysis type** within package. MVPA framework designed extensible via S3 generics. providing necessary methods classes, can integrate custom analyses (beyond standard classification, regression, RSA).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/new-analysis-overview.html","id":"overview","dir":"Reference","previous_headings":"","what":"Overview","title":"Extending the MVPA Framework: Creating a New Analysis Type — new-analysis-overview","text":"1. **Define Model Specification**    - Create S3 class inheriting model_spec, e.g. \"myanalysis_model\".    - class hold **parameters** **configuration** needed analysis      (e.g., hyperparameters, references, design objects).    - Construct using function like create_model_spec(\"myanalysis_model\", ...). 2. **Implement Required Generics**    - train_model.myanalysis_model(obj, train_dat, ...):      Defines \"train\" execute analysis subset data      (e.g., ROI voxel intensities).      - might involve fitting specialized model, computing metric,        unsupervised transform.      - Return structured object (often named list model fit) can        handled framework.    - process_roi.myanalysis_model(mod_spec, roi, rnum, ...) (Optional):      need custom per-ROI logic beyond default pipeline, implement      process_roi method class. method called automatically      run_regional(...) region.      - default, framework calls train_model ROI's data,        want skip alter flow, provide custom process_roi method.    - (Optional) predict_model.myanalysis_model(...) evaluate_model.myanalysis_model(...):      analysis involves separate test step specialized evaluation, can      define S3 methods.    - (Optional) run_future.myanalysis_model(...), merge_results.myanalysis_model(...), etc.:      need custom behavior parallelization merging partial results, override      generics well. 3. **Use `run_regional()` `run_searchlight()`**    - new model class defined, can pass object class      run_regional(...) run_searchlight(...) just like built-analysis.    - framework automatically dispatches calls train_model.myanalysis_model      (optionally process_roi.myanalysis_model), returning result object      consistent MVPA analyses.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/new-analysis-overview.html","id":"why-these-pieces-are-needed","dir":"Reference","previous_headings":"","what":"Why These Pieces Are Needed","title":"Extending the MVPA Framework: Creating a New Analysis Type — new-analysis-overview","text":"- **Model Specification**: Provides blueprint pipeline handle analysis   (data need, store intermediate results, etc.). - **Train Model Generic**: Tells pipeline chunk data   (ROI subset, searchlight voxel set, cross-validation fold).   core analysis. - **process_roi**: analysis requires complex per-region logic default   pipeline (e.g., skipping certain steps, altering data structure), implementing   process_roi.myanalysis_model gives full control.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/new-analysis-overview.html","id":"example-code-skeleton","dir":"Reference","previous_headings":"","what":"Example Code Skeleton","title":"Extending the MVPA Framework: Creating a New Analysis Type — new-analysis-overview","text":"","code":"# Minimal template for a new analysis model  myanalysis_model <- function(dataset, design, param1=NULL, param2=5, ...) {   # Create an object of class \"myanalysis_model\"   create_model_spec(     \"myanalysis_model\",     dataset  = dataset,     design   = design,     param1   = param1,     param2   = param2,     ...   ) }  # S3 method to \"train\" your analysis train_model.myanalysis_model <- function(obj, train_dat, y, indices, ...) {   # train_dat = subset of voxel intensities or features   # y = optional labels/response if relevant   # indices = location info    # 1) Do your computations (model fitting, metrics, transforms, etc.)   fit_object <- your_method(train_dat, some_params=obj$param1)    # 2) Return a structure. The pipeline may store or evaluate it further.   list(     fit = fit_object,     # any other stuff you want to keep   ) }  # Optional custom ROI processor process_roi.myanalysis_model <- function(mod_spec, roi, rnum, ...) {   # If you want to skip or augment the default cross-validation / train_model approach   # in run_regional, define your logic here.   # Otherwise, the default calls train_model(...) on the region's data. }  # You can now call: # new_model <- myanalysis_model(dataset, design, param1=\"xyz\") # results_regional <- run_regional(new_model, region_mask) # results_searchlight <- run_searchlight(new_model, radius=8, method=\"standard\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/nobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Number of Observations — nobs","title":"Get Number of Observations — nobs","text":"Retrieve number observations object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/nobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Number of Observations — nobs","text":"","code":"nobs(x)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/nobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Number of Observations — nobs","text":"x input object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/nobs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Number of Observations — nobs","text":"number observations.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/nresponses.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of Response Categories — nresponses","title":"Number of Response Categories — nresponses","text":"Get number response categories levels.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/nresponses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of Response Categories — nresponses","text":"","code":"nresponses(x)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/nresponses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of Response Categories — nresponses","text":"x object extract number categories.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/nresponses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of Response Categories — nresponses","text":"number response categories.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.cordist.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pairwise Correlation Distances — pairwise_dist.cordist","title":"Compute Pairwise Correlation Distances — pairwise_dist.cordist","text":"Computes full NxN matrix correlation-based distances: 1 - cor(t(X), method=obj$method). block-based exclusion performed .","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.cordist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pairwise Correlation Distances — pairwise_dist.cordist","text":"","code":"# S3 method for class 'cordist' pairwise_dist(obj, X)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.cordist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pairwise Correlation Distances — pairwise_dist.cordist","text":"obj distance function object class c(\"cordist\", \"distfun\"). X numeric matrix (rows = observations, columns = variables).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.cordist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pairwise Correlation Distances — pairwise_dist.cordist","text":"N x N numeric matrix pairwise distances.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.cordist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Pairwise Correlation Distances — pairwise_dist.cordist","text":"function calculates correlation distances among rows X. block variable wish exclude -block comparisons, handle obtaining full matrix (e.g., second_order_similarity).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.cordist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Pairwise Correlation Distances — pairwise_dist.cordist","text":"","code":"X <- matrix(rnorm(100), 10, 10) dist_obj <- cordist(method=\"pearson\") dist_matrix <- pairwise_dist(dist_obj, X) #> Error in pairwise_dist(dist_obj, X): could not find function \"pairwise_dist\""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.euclidean.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pairwise Euclidean Distances — pairwise_dist.euclidean","title":"Compute Pairwise Euclidean Distances — pairwise_dist.euclidean","text":"Returns full NxN matrix Euclidean distances among rows X. block-based exclusion performed.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.euclidean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pairwise Euclidean Distances — pairwise_dist.euclidean","text":"","code":"# S3 method for class 'euclidean' pairwise_dist(obj, X)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.euclidean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pairwise Euclidean Distances — pairwise_dist.euclidean","text":"obj distance function object class c(\"euclidean\", \"distfun\"). X numeric matrix (rows = observations, columns = variables).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.euclidean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pairwise Euclidean Distances — pairwise_dist.euclidean","text":"N x N numeric matrix pairwise Euclidean distances.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.euclidean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Pairwise Euclidean Distances — pairwise_dist.euclidean","text":"function simply calls dist(X) internally converts matrix via .matrix().","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.euclidean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Pairwise Euclidean Distances — pairwise_dist.euclidean","text":"","code":"X <- matrix(rnorm(100), 10, 10) dist_obj <- eucdist() dist_matrix <- pairwise_dist(dist_obj, X) #> Error in pairwise_dist(dist_obj, X): could not find function \"pairwise_dist\""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.mahalanobis.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pairwise Mahalanobis Distances — pairwise_dist.mahalanobis","title":"Compute Pairwise Mahalanobis Distances — pairwise_dist.mahalanobis","text":"Returns full NxN matrix Mahalanobis distances among rows X, using shrunken inverse covariance. block-based exclusion performed.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.mahalanobis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pairwise Mahalanobis Distances — pairwise_dist.mahalanobis","text":"","code":"# S3 method for class 'mahalanobis' pairwise_dist(obj, X)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.mahalanobis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pairwise Mahalanobis Distances — pairwise_dist.mahalanobis","text":"obj distance function object class c(\"mahalanobis\", \"distfun\"). X numeric matrix (rows = observations, columns = variables).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.mahalanobis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pairwise Mahalanobis Distances — pairwise_dist.mahalanobis","text":"N x N numeric matrix pairwise Mahalanobis distances.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.mahalanobis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Pairwise Mahalanobis Distances — pairwise_dist.mahalanobis","text":"Uses corpcor::invcov.shrink X estimate inverse covariance matrix computes mahalanobis(...) row vs. row.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.mahalanobis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Pairwise Mahalanobis Distances — pairwise_dist.mahalanobis","text":"","code":"X <- matrix(rnorm(100), 10, 10) dist_obj <- mahadist() dist_matrix <- pairwise_dist(dist_obj, X) #> Error in pairwise_dist(dist_obj, X): could not find function \"pairwise_dist\""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.pcadist.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pairwise PCA-Based Distances — pairwise_dist.pcadist","title":"Compute Pairwise PCA-Based Distances — pairwise_dist.pcadist","text":"Returns full NxN matrix distances PCA-reduced subspace, optional whitening step. block-based exclusion performed.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.pcadist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pairwise PCA-Based Distances — pairwise_dist.pcadist","text":"","code":"# S3 method for class 'pcadist' pairwise_dist(obj, X)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.pcadist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pairwise PCA-Based Distances — pairwise_dist.pcadist","text":"obj distance function object class c(\"pcadist\", \"distfun\"). X numeric matrix.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.pcadist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pairwise PCA-Based Distances — pairwise_dist.pcadist","text":"N x N numeric matrix pairwise distances reduced PCA space.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.pcadist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Pairwise PCA-Based Distances — pairwise_dist.pcadist","text":"1. Performs prcomp(X) (centered, scaled=TRUE). 2. Determines number components via obj$threshfun(...). 3. Optionally whitens (divide principal component standard deviation). 4. Computes pairwise distances reduced data using obj$dist_method.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.pcadist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Pairwise PCA-Based Distances — pairwise_dist.pcadist","text":"","code":"X <- matrix(rnorm(100), 10, 10) dist_obj <- pcadist(ncomp=3, dist_method=\"cosine\") dist_matrix <- pairwise_dist(dist_obj, X) #> Error in pairwise_dist(dist_obj, X): could not find function \"pairwise_dist\""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.robustmahadist.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pairwise Robust Mahalanobis Distances — pairwise_dist.robustmahadist","title":"Compute Pairwise Robust Mahalanobis Distances — pairwise_dist.robustmahadist","text":"Returns full NxN matrix robust Mahalanobis distances, using robust covariance estimator. block-based exclusion performed.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.robustmahadist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pairwise Robust Mahalanobis Distances — pairwise_dist.robustmahadist","text":"","code":"# S3 method for class 'robustmahadist' pairwise_dist(obj, X)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.robustmahadist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pairwise Robust Mahalanobis Distances — pairwise_dist.robustmahadist","text":"obj distance function object class c(\"robustmahadist\", \"distfun\"). X numeric matrix.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.robustmahadist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pairwise Robust Mahalanobis Distances — pairwise_dist.robustmahadist","text":"N x N numeric matrix pairwise robust Mahalanobis distances.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.robustmahadist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Pairwise Robust Mahalanobis Distances — pairwise_dist.robustmahadist","text":"- Estimates robust covariance robustcov::covGK(X) (make sure robustcov package installed). - calls corpcor::invcov.shrink get inverse covariance estimate. - Finally, loops row pairs compute (x_i - x_j) * inv_cov * (x_i - x_j)^T.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pairwise_dist.robustmahadist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Pairwise Robust Mahalanobis Distances — pairwise_dist.robustmahadist","text":"","code":"if (FALSE) { # \\dontrun{   library(robustcov)   X <- matrix(rnorm(100), 10, 10)   dist_obj <- robustmahadist()   dist_matrix <- pairwise_dist(dist_obj, X) } # }"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Performance Metrics — performance","title":"Compute Performance Metrics — performance","text":"Compute performance metrics (accuracy, AUC, RMSE, etc.) classification/regression results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Performance Metrics — performance","text":"","code":"performance(x, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Performance Metrics — performance","text":"x classification/regression result object evaluate. ... Additional arguments passed method-specific performance functions.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Performance Metrics — performance","text":"list performance metrics.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/performance.regression_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Performance Metrics for Regression Result — performance.regression_result","title":"Calculate Performance Metrics for Regression Result — performance.regression_result","text":"function calculates performance metrics regression result object, including R-squared, Root Mean Squared Error (RMSE), Spearman correlation.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/performance.regression_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Performance Metrics for Regression Result — performance.regression_result","text":"","code":"# S3 method for class 'regression_result' performance(x, split_list, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/performance.regression_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Performance Metrics for Regression Result — performance.regression_result","text":"x regression_result object. split_list Split results indexed sub-groups (supported regression analyses yet). ... extra args (used).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/performance.regression_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Performance Metrics for Regression Result — performance.regression_result","text":"named vector calculated performance metrics: R-squared, RMSE, Spearman correlation.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/performance.regression_result.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Performance Metrics for Regression Result — performance.regression_result","text":"function calculates following performance metrics given regression result object: - R-squared: proportion variance observed data predictable fitted model. - RMSE: root mean squared error, measure differences predicted observed values. - Spearman correlation: measure monotonic relationship predicted observed values.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pool_randomized.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine randomized searchlight results by pooling — pool_randomized","title":"Combine randomized searchlight results by pooling — pool_randomized","text":"function combines randomized searchlight results pooling good results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pool_randomized.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine randomized searchlight results by pooling — pool_randomized","text":"","code":"pool_randomized(model_spec, good_results, bad_results)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pool_randomized.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine randomized searchlight results by pooling — pool_randomized","text":"model_spec object specifying model used searchlight analysis. good_results data frame containing valid searchlight results. bad_results data frame containing invalid searchlight results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/pool_randomized.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine randomized searchlight results by pooling — pool_randomized","text":"object containing combined searchlight results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/predict_model.feature_rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for Feature RSA Model — predict_model.feature_rsa_model","title":"Predict Method for Feature RSA Model — predict_model.feature_rsa_model","text":"Predict Method Feature RSA Model","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/predict_model.feature_rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for Feature RSA Model — predict_model.feature_rsa_model","text":"","code":"predict_model.feature_rsa_model(object, fit, newdata, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/predict_model.feature_rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for Feature RSA Model — predict_model.feature_rsa_model","text":"object trained feature RSA model (method, etc.) fit fitted model object training_model() newdata New feature data matrix (rows = test obs, cols = features) ... Additional args","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/predict_model.feature_rsa_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for Feature RSA Model — predict_model.feature_rsa_model","text":"Predicted brain activity X values (matrix).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/predicted_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Predicted Class from Probability Matrix — predicted_class","title":"Calculate the Predicted Class from Probability Matrix — predicted_class","text":"function calculates predicted class matrix predicted probabilities. class highest probability selected predicted class.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/predicted_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Predicted Class from Probability Matrix — predicted_class","text":"","code":"predicted_class(prob)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/predicted_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Predicted Class from Probability Matrix — predicted_class","text":"prob matrix predicted probabilities column names indicating classes.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/predicted_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Predicted Class from Probability Matrix — predicted_class","text":"vector predicted classes corresponding highest probability row input matrix.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/prep_regional.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare regional data for MVPA analysis — prep_regional","title":"Prepare regional data for MVPA analysis — prep_regional","text":"function processes input data prepares regions MVPA analysis extracting voxel indices region interest (ROI) specified region_mask.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/prep_regional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare regional data for MVPA analysis — prep_regional","text":"","code":"prep_regional(model_spec, region_mask)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/prep_regional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare regional data for MVPA analysis — prep_regional","text":"model_spec model specification object. region_mask mask representing different regions brain image.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/prep_regional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare regional data for MVPA analysis — prep_regional","text":"list containing information regions processing:   * allrois: vector unique ROI labels.   * region_vec: vector representation region_mask.   * region_set: sorted vector unique ROI labels region_mask.   * vox_iter: list containing voxel indices ROI.   * lens: vector containing number voxels ROI.   * keep: logical vector indicating ROI kept analysis (one voxel).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/prep_regional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare regional data for MVPA analysis — prep_regional","text":"","code":"# Create example inputs model_spec <- list(dataset = \"Example dataset\") region_mask <- matrix(c(rep(0, 5), rep(1, 5), rep(2, 5), rep(3, 5)), nrow = 5)  # Prepare regional data regional_data <- prep_regional(model_spec, region_mask) #> Error in UseMethod(\"get_unique_regions\"): no applicable method for 'get_unique_regions' applied to an object of class \"c('matrix', 'array', 'double', 'numeric')\""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.feature_rsa_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Feature RSA Design — print.feature_rsa_design","title":"Print Method for Feature RSA Design — print.feature_rsa_design","text":"Print Method Feature RSA Design","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.feature_rsa_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Feature RSA Design — print.feature_rsa_design","text":"","code":"# S3 method for class 'feature_rsa_design' print(x, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.feature_rsa_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Feature RSA Design — print.feature_rsa_design","text":"x feature_rsa_design object. ... Additional arguments (ignored).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.feature_rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Feature RSA Model — print.feature_rsa_model","title":"Print Method for Feature RSA Model — print.feature_rsa_model","text":"Print Method Feature RSA Model","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.feature_rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Feature RSA Model — print.feature_rsa_model","text":"","code":"# S3 method for class 'feature_rsa_model' print(x, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.feature_rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Feature RSA Model — print.feature_rsa_model","text":"x feature_rsa_model object. ... Additional arguments (ignored).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.vector_rsa_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for vector_rsa_design — print.vector_rsa_design","title":"Print Method for vector_rsa_design — print.vector_rsa_design","text":"Print Method vector_rsa_design","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.vector_rsa_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for vector_rsa_design — print.vector_rsa_design","text":"","code":"# S3 method for class 'vector_rsa_design' print(x, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.vector_rsa_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for vector_rsa_design — print.vector_rsa_design","text":"x vector_rsa_design object. ... Additional arguments (ignored).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.vector_rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for vector_rsa_model — print.vector_rsa_model","title":"Print Method for vector_rsa_model — print.vector_rsa_model","text":"Print Method vector_rsa_model","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.vector_rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for vector_rsa_model — print.vector_rsa_model","text":"","code":"# S3 method for class 'vector_rsa_model' print(x, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/print.vector_rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for vector_rsa_model — print.vector_rsa_model","text":"x object class vector_rsa_model. ... Additional arguments (ignored).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/prob_observed.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability of Observed Class — prob_observed","title":"Probability of Observed Class — prob_observed","text":"Extract predicted probability observed class.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/prob_observed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability of Observed Class — prob_observed","text":"","code":"prob_observed(x)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/prob_observed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability of Observed Class — prob_observed","text":"x object extract probability.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/prob_observed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability of Observed Class — prob_observed","text":"vector predicted probabilities.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rMVPA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rMVPA: Multivoxel Pattern Analysis in R — rMVPA-package","title":"rMVPA: Multivoxel Pattern Analysis in R — rMVPA-package","text":"R package facilitate multivoxel pattern analysis neuroimaging data R.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rMVPA-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rMVPA: Multivoxel Pattern Analysis in R — rMVPA-package","text":"Maintainer: Bradley Buchsbaum brad.buchsbaum@gmail.com","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rMVPA.html","id":null,"dir":"Reference","previous_headings":"","what":"rMVPA: A package for multi-voxel pattern analysis (MVPA) — rMVPA","title":"rMVPA: A package for multi-voxel pattern analysis (MVPA) — rMVPA","text":"rMVPA package provides tools running region--interest searchlight MVPA analyses.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/regional_mvpa_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a regional_mvpa_result instance — regional_mvpa_result","title":"Create a regional_mvpa_result instance — regional_mvpa_result","text":"Constructs regional MVPA result object stores results MVPA analysis specific region.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/regional_mvpa_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a regional_mvpa_result instance — regional_mvpa_result","text":"","code":"regional_mvpa_result(   model_spec,   performance_table,   prediction_table,   vol_results,   fits = fits )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/regional_mvpa_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a regional_mvpa_result instance — regional_mvpa_result","text":"model_spec model specification object. performance_table data frame performance measures. prediction_table data frame prediction results. vol_results list voxel-level results. fits Optional model fits.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/regional_mvpa_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a regional_mvpa_result instance — regional_mvpa_result","text":"regional_mvpa_result object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/regional_mvpa_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a regional_mvpa_result instance — regional_mvpa_result","text":"","code":"# Create example inputs model_spec <- list(dataset = \"Example dataset\") performance_table <- data.frame(accuracy = c(0.8, 0.85)) prediction_table <- data.frame(observed = factor(rep(letters[1:2], 5)),                                 predicted = factor(rep(letters[1:2], 5))) vol_results <- list(vol1 = \"Example vol_result 1\", vol2 = \"Example vol_result 2\") fits <- list(fit1 = \"Example fit 1\", fit2 = \"Example fit 2\")  # Construct a regional_mvpa_result regional_result <- regional_mvpa_result(model_spec, performance_table,                                         prediction_table, vol_results, fits = fits)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/regression_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Regression Result Object — regression_result","title":"Create a Regression Result Object — regression_result","text":"function creates regression result object containing observed predicted values, test design, test indices, predictor.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/regression_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Regression Result Object — regression_result","text":"","code":"regression_result(   observed,   predicted,   testind = NULL,   test_design = NULL,   predictor = NULL )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/regression_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Regression Result Object — regression_result","text":"observed vector observed values. predicted vector predicted values. testind vector indices test data (optional). test_design test design (optional). predictor predictor used regression model (optional).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/regression_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Regression Result Object — regression_result","text":"list class attributes \"regression_result\", \"classification_result\", \"list\" containing observed predicted values, test design, test indices, predictor.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a design for an RSA (Representational Similarity Analysis) model — rsa_design","title":"Construct a design for an RSA (Representational Similarity Analysis) model — rsa_design","text":"function constructs design RSA model using provided formula, data, optional parameters.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a design for an RSA (Representational Similarity Analysis) model — rsa_design","text":"","code":"rsa_design(   formula,   data,   block_var = NULL,   split_by = NULL,   keep_intra_run = FALSE )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a design for an RSA (Representational Similarity Analysis) model — rsa_design","text":"formula formula expression specifying dissimilarity-based regression function. data named list containing dissimilarity matrices auxiliary variables. block_var optional formula, character name integer vector designating block structure. split_by optional formula indicating grouping structure evaluating test performance. keep_intra_run logical indicating whether include within-run comparisons (default: FALSE).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a design for an RSA (Representational Similarity Analysis) model — rsa_design","text":"list class attributes \"rsa_design\" \"list\", containing: formula input formula data input data split_by split_by formula split_groups Grouping structure split_by block_var Block structure include Logical vector including/excluding comparisons model_mat Model matrix generated rsa_model_mat","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a design for an RSA (Representational Similarity Analysis) model — rsa_design","text":"function creates RSA design based input parameters. checks validity input data handles splitting conditions evaluation test performance. also processes optional block structures within-run comparisons.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a design for an RSA (Representational Similarity Analysis) model — rsa_design","text":"","code":"dismat <- dist(matrix(rnorm(100*100), 100, 100)) rdes <- rsa_design(~ dismat, list(dismat=dismat))"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an RSA (Representational Similarity Analysis) model — rsa_model","title":"Construct an RSA (Representational Similarity Analysis) model — rsa_model","text":"function creates RSA model object taking MVPA (Multi-Variate Pattern Analysis) dataset RSA design.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an RSA (Representational Similarity Analysis) model — rsa_model","text":"","code":"rsa_model(dataset, design, distmethod = \"spearman\", regtype = \"pearson\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an RSA (Representational Similarity Analysis) model — rsa_model","text":"dataset instance mvpa_dataset. design instance rsa_design created rsa_design(). distmethod character string specifying method used compute distances observations. One : \"pearson\" \"spearman\" (defaults \"spearman\"). regtype character string specifying analysis method. One : \"pearson\", \"spearman\", \"lm\", \"rfit\" (defaults \"pearson\").","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an RSA (Representational Similarity Analysis) model — rsa_model","text":"list two elements: dataset design, class attribute set \"rsa_model\" \"list\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/rsa_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an RSA (Representational Similarity Analysis) model — rsa_model","text":"","code":"# Create a random MVPA dataset data <- matrix(rnorm(100 * 100), 100, 100) labels <- factor(rep(1:2, each = 50)) mvpa_data <- mvpa_dataset(data, labels) #> Error: train_data does not inherit from class NeuroVec  # Create an RSA design dismat <- dist(data) rdes <- rsa_design(~ dismat, list(dismat = dismat))  # Create an RSA model with default parameters rsa_mod <- rsa_model(mvpa_data, rdes) #> Error: object 'mvpa_data' not found  # Create an RSA model with custom parameters rsa_mod_custom <- rsa_model(mvpa_data, rdes, distmethod = \"pearson\", regtype = \"lm\") #> Error: object 'mvpa_data' not found"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for run_regional — run_regional.default","title":"Default method for run_regional — run_regional.default","text":"default, object implement specific run_regional.* method, fallback attempt run run_regional_base pipeline.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for run_regional — run_regional.default","text":"","code":"# Default S3 method run_regional(model_spec, region_mask, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for run_regional — run_regional.default","text":"model_spec generic model specification object. region_mask mask representing different brain regions. ... Additional arguments passed run_regional_base.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default method for run_regional — run_regional.default","text":"regional_mvpa_result object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.feature_rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Specialized run_regional method for feature_rsa_model — run_regional.feature_rsa_model","title":"Specialized run_regional method for feature_rsa_model — run_regional.feature_rsa_model","text":"function runs regional analysis using feature RSA model region mask.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.feature_rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specialized run_regional method for feature_rsa_model — run_regional.feature_rsa_model","text":"","code":"# S3 method for class 'feature_rsa_model' run_regional(   model_spec,   region_mask,   coalesce_design_vars = FALSE,   processor = NULL,   verbose = FALSE,   ... )  # S3 method for class 'feature_rsa_model' run_regional(   model_spec,   region_mask,   coalesce_design_vars = FALSE,   processor = NULL,   verbose = FALSE,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.feature_rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specialized run_regional method for feature_rsa_model — run_regional.feature_rsa_model","text":"model_spec feature_rsa_model object. region_mask mask representing different brain regions. coalesce_design_vars TRUE, merges design variables prediction table. processor custom processor function ROIs. NULL, uses defaults. verbose Print progress messages. ... Additional arguments","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.feature_rsa_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specialized run_regional method for feature_rsa_model — run_regional.feature_rsa_model","text":"integrates `feature_rsa_model` MVPA framework, similar `run_regional.mvpa_model`.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.html","id":null,"dir":"Reference","previous_headings":"","what":"Region of Interest Based MVPA Analysis — run_regional","title":"Region of Interest Based MVPA Analysis — run_regional","text":"Run separate MVPA analysis multiple disjoint regions interest.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Region of Interest Based MVPA Analysis — run_regional","text":"","code":"run_regional(model_spec, region_mask, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Region of Interest Based MVPA Analysis — run_regional","text":"model_spec mvpa_model instance containing model specifications region_mask NeuroVol NeuroSurface object region identified unique integer ... Extra arguments passed specific regional analysis methods","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Region of Interest Based MVPA Analysis — run_regional","text":"named list containing: performance Performance metrics region prediction_table Predictions region fits Model fits return_fits=TRUE","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Region of Interest Based MVPA Analysis — run_regional","text":"","code":"# \\donttest{   # Generate sample dataset (3D volume with categorical response)   dataset <- gen_sample_dataset(     D = c(10,10,10),       # Small 10x10x10 volume     nobs = 100,            # 100 observations     nlevels = 3,           # 3 classes     response_type = \"categorical\",     data_mode = \"image\",     blocks = 3             # 3 blocks for cross-validation   )      # Create region mask with 5 ROIs   region_mask <- NeuroVol(     sample(1:5, size=length(dataset$dataset$mask), replace=TRUE),     space(dataset$dataset$mask)   ) #> Error in NeuroVol(sample(1:5, size = length(dataset$dataset$mask), replace = TRUE),     space(dataset$dataset$mask)): could not find function \"NeuroVol\"      # Create cross-validation specification   cval <- blocked_cross_validation(dataset$design$block_var)      # Load SDA classifier (Shrinkage Discriminant Analysis)   model <- load_model(\"sda_notune\")      # Create MVPA model   mspec <- mvpa_model(     model = model,     dataset = dataset$dataset,     design = dataset$design,     model_type = \"classification\",     crossval = cval,     return_fits = TRUE    # Return fitted models   )      # Run regional analysis   results <- run_regional(mspec, region_mask) #> Error: object 'region_mask' not found      # Access results   head(results$performance)           # Performance metrics #> Error: object 'results' not found   head(results$prediction_table)      # Predictions #> Error: object 'results' not found   first_roi_fit <- results$fits[[1]]  # First ROI's fitted model #> Error: object 'results' not found # }"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.mvpa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Specialized run_regional method for mvpa_model — run_regional.mvpa_model","title":"Specialized run_regional method for mvpa_model — run_regional.mvpa_model","text":"method wraps run_regional_base default arguments mvpa_model object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.mvpa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specialized run_regional method for mvpa_model — run_regional.mvpa_model","text":"","code":"# S3 method for class 'mvpa_model' run_regional(   model_spec,   region_mask,   coalesce_design_vars = FALSE,   processor = NULL,   verbose = FALSE,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.mvpa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specialized run_regional method for mvpa_model — run_regional.mvpa_model","text":"model_spec mvpa_model object. region_mask mask brain regions. coalesce_design_vars TRUE, merges design variables prediction table. processor optional processor function region. verbose TRUE, prints progress messages. ... Additional arguments passed run_regional_base.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Specialized run_regional method for rsa_model — run_regional.rsa_model","title":"Specialized run_regional method for rsa_model — run_regional.rsa_model","text":"default, RSA models produce full prediction table (set return_predictions = FALSE).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specialized run_regional method for rsa_model — run_regional.rsa_model","text":"","code":"# S3 method for class 'rsa_model' run_regional(   model_spec,   region_mask,   return_fits = FALSE,   compute_performance = TRUE,   coalesce_design_vars = FALSE,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional.rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specialized run_regional method for rsa_model — run_regional.rsa_model","text":"model_spec rsa_model object. region_mask mask brain regions. return_fits Whether return region's fitted model (default FALSE). compute_performance logical indicating whether compute performance metrics. coalesce_design_vars TRUE, merges design variables prediction table (though typically one RSA). ... Additional arguments passed run_regional_base.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional_base.html","id":null,"dir":"Reference","previous_headings":"","what":"A ","title":"A ","text":"\"base\" function standard regional analysis pipeline","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A ","text":"","code":"run_regional_base(   model_spec,   region_mask,   coalesce_design_vars = FALSE,   processor = NULL,   verbose = FALSE,   compute_performance = model_spec$compute_performance,   return_predictions = model_spec$return_predictions,   return_fits = model_spec$return_fits,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A ","text":"model_spec model specification object. region_mask mask representing different brain regions either NeuroVol NeuroSurface. coalesce_design_vars TRUE, merges design variables prediction table (present). processor optional processor function region (ROI). verbose TRUE, prints progress messages. compute_performance Logical indicating whether compute performance metrics (defaults model_spec$compute_performance). return_predictions Logical indicating whether combine full prediction table (defaults model_spec$return_predictions). return_fits Logical indicating whether return fitted models (defaults model_spec$return_fits). ... Additional arguments passed along mvpa_iterate methods.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_regional_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A ","text":"regional_mvpa_result object containing: performance_table: tibble performance metrics per region prediction_table: tibble (return_predictions = TRUE) vol_results: list volumetric maps (compute_performance = TRUE) fits: list model fits return_fits = TRUE model_spec: original model specification","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for run_searchlight — run_searchlight.default","title":"Default method for run_searchlight — run_searchlight.default","text":"default, object's class implement specific run_searchlight.<class> method, fallback call run_searchlight_base.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for run_searchlight — run_searchlight.default","text":"","code":"# Default S3 method run_searchlight(   model_spec,   radius = 8,   method = c(\"randomized\", \"standard\"),   niter = 4,   combiner = \"average\",   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for run_searchlight — run_searchlight.default","text":"model_spec generic model specification object. radius Numeric searchlight radius (1 100). method Character: \"standard\" \"randomized\". niter Number iterations method=\"randomized\". combiner Either function combines partial results string (\"pool\", \"average\") selects built-combiner. ... Additional arguments passed do_standard do_randomized.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.feature_rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run searchlight analysis with a feature RSA model — run_searchlight.feature_rsa_model","title":"Run searchlight analysis with a feature RSA model — run_searchlight.feature_rsa_model","text":"method provides specialized handling feature RSA models searchlight analysis.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.feature_rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run searchlight analysis with a feature RSA model — run_searchlight.feature_rsa_model","text":"","code":"# S3 method for class 'feature_rsa_model' run_searchlight(   model_spec,   radius = 8,   method = c(\"randomized\", \"standard\"),   niter = 4,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.feature_rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run searchlight analysis with a feature RSA model — run_searchlight.feature_rsa_model","text":"model_spec feature_rsa_model object radius Numeric radius searchlight spheres method Method searchlight: \"standard\" \"randomized\" niter Number iterations randomized searchlight ... Additional arguments passed run_searchlight_base","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Searchlight Analysis — run_searchlight","title":"Run Searchlight Analysis — run_searchlight","text":"Execute searchlight analysis using multivariate pattern analysis.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Searchlight Analysis — run_searchlight","text":"","code":"run_searchlight(   model_spec,   radius,   method = c(\"standard\", \"randomized\"),   niter = NULL,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Searchlight Analysis — run_searchlight","text":"model_spec mvpa_model instance containing model specifications radius searchlight radius millimeters method type searchlight, either 'randomized' 'standard' niter number searchlight iterations (used 'randomized' method) ... Extra arguments passed specific searchlight methods","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Searchlight Analysis — run_searchlight","text":"named list NeuroVol objects containing performance metrics (e.g., AUC) voxel location","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Searchlight Analysis — run_searchlight","text":"","code":"# \\donttest{   # Generate sample dataset with categorical response   dataset <- gen_sample_dataset(     D = c(8,8,8),           # 8x8x8 volume     nobs = 100,             # 100 observations     response_type = \"categorical\",     data_mode = \"image\",     blocks = 3,             # 3 blocks for cross-validation     nlevels = 2             # binary classification   )      # Create cross-validation specification using blocks   cval <- blocked_cross_validation(dataset$design$block_var)      # Load the SDA classifier (Shrinkage Discriminant Analysis)   model <- load_model(\"sda_notune\")      # Create MVPA model   mspec <- mvpa_model(     model = model,     dataset = dataset$dataset,     design = dataset$design,     model_type = \"classification\",     crossval = cval   )      # Run searchlight analysis   results <- run_searchlight(     mspec,     radius = 8,            # 8mm radius     method = \"standard\"    # Use standard searchlight   ) #> function (model_spec, good_results, bad_results = NULL)   #> [1] \"combiner is \" #> INFO [2025-03-20 21:29:24] Running standard searchlight with radius = 8 #> INFO [2025-03-20 21:29:24] creating standard searchlight #> INFO [2025-03-20 21:29:24] running standard searchlight iterator #> INFO [2025-03-20 21:29:24] ⚡ Processing batch 1/11 #> INFO [2025-03-20 21:29:31] ⚡ Processing batch 2/11 #> INFO [2025-03-20 21:29:38] ⚡ Processing batch 3/11 #> INFO [2025-03-20 21:29:44] ⚡ Processing batch 4/11 #> INFO [2025-03-20 21:29:50] ⚡ Processing batch 5/11 #> INFO [2025-03-20 21:29:56] ⚡ Processing batch 6/11 #> INFO [2025-03-20 21:30:03] ⚡ Processing batch 7/11 #> INFO [2025-03-20 21:30:09] ⚡ Processing batch 8/11 #> INFO [2025-03-20 21:30:15] ⚡ Processing batch 9/11 #> INFO [2025-03-20 21:30:21] ⚡ Processing batch 10/11 #> INFO [2025-03-20 21:30:27] ⚡ Processing batch 11/11 #> INFO [2025-03-20 21:30:32]  #> ✨ MVPA Iteration Complete #> ├─ Total ROIs: 254 #> ├─ Processed: 254 #> └─ Skipped: 0      # Results contain performance metrics   # Access them with results$performance # }"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.vector_rsa.html","id":null,"dir":"Reference","previous_headings":"","what":"run_searchlight method for vector_rsa_model — run_searchlight.vector_rsa","title":"run_searchlight method for vector_rsa_model — run_searchlight.vector_rsa","text":"sets custom mvpa_fun (e.g., vector_rsa_iterate) different combiners standard vs. randomized, etc.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.vector_rsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run_searchlight method for vector_rsa_model — run_searchlight.vector_rsa","text":"","code":"# S3 method for class 'vector_rsa' run_searchlight(   model_spec,   radius = 8,   method = c(\"randomized\", \"standard\"),   niter = 4,   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight.vector_rsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run_searchlight method for vector_rsa_model — run_searchlight.vector_rsa","text":"model_spec vector_rsa_model object. radius Numeric searchlight radius (1 100). method Character: \"standard\" \"randomized\". niter Number iterations method=\"randomized\". ... Additional arguments passed do_standard do_randomized.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight_base.html","id":null,"dir":"Reference","previous_headings":"","what":"A ","title":"A ","text":"function implements generic logic running searchlight: Checks radius method. \"standard\" searchlight, calls do_standard(...). \"randomized\", calls do_randomized(...) niter times. Handles combiner function string (\"pool\", \"average\").","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A ","text":"","code":"run_searchlight_base(   model_spec,   radius = 8,   method = c(\"randomized\", \"standard\"),   niter = 4,   combiner = \"average\",   ... )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A ","text":"model_spec model specification object (e.g., mvpa_model, vector_rsa_model, etc.). radius Numeric searchlight radius (1 100). method Character: \"standard\" \"randomized\". niter Number iterations method=\"randomized\". combiner Either function combines partial results string (\"pool\", \"average\") selects built-combiner. ... Additional arguments passed do_standard do_randomized.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A ","text":"result object do_standard do_randomized (often searchlight_result similar).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/run_searchlight_base.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A ","text":"assume specific model type, expects model_spec compatible do_standard(...) do_randomized(...) code.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/second_order_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Second-Order Similarity Scores — second_order_similarity","title":"Compute Second-Order Similarity Scores — second_order_similarity","text":"Calculates correlation-based second order similarity : full NxN distance matrix computed X via distfun, Dref matrix (\"reference\" dissimilarities). row , excludes -block comparisons selecting (block_var != block_var[]).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/second_order_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Second-Order Similarity Scores — second_order_similarity","text":"","code":"second_order_similarity(   distfun,   X,   Dref,   block_var,   method = c(\"pearson\", \"spearman\") )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/second_order_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Second-Order Similarity Scores — second_order_similarity","text":"distfun S3 distance object (see create_dist) specifying compute pairwise distance matrix X. X numeric matrix (rows = observations, columns = features). Dref numeric NxN reference matrix dissimilarities (e.g., ROI mask prior). block_var vector indicating block/group memberships row X. method Correlation method: \"pearson\" \"spearman\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/second_order_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Second-Order Similarity Scores — second_order_similarity","text":"numeric vector length nrow(X), entry correlation (using method) distance_matrix[, valid] Dref[, valid], valid = (block_var != block_var[]).","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/second_order_similarity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Second-Order Similarity Scores — second_order_similarity","text":"function first calls pairwise_dist(distfun, X), obtaining NxN matrix pairwise distances. block-based exclusion internally. Instead, row , excludes -block rows correlation subsetting distances valid_indices.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/second_order_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Second-Order Similarity Scores — second_order_similarity","text":"","code":"# Suppose we have X (10x5), a reference D (10x10), block var, and a correlation distfun: X <- matrix(rnorm(50), 10, 5) D <- matrix(runif(100), 10, 10) block <- rep(1:2, each=5) dist_obj <- cordist(method=\"pearson\") scores <- second_order_similarity(dist_obj, X, D, block, method=\"spearman\")"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.FTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform feature selection using the F-test method — select_features.FTest","title":"Perform feature selection using the F-test method — select_features.FTest","text":"function selects features input data matrix X using F-test method provided feature selection specification.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.FTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform feature selection using the F-test method — select_features.FTest","text":"","code":"# S3 method for class 'FTest' select_features(obj, X, Y, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.FTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform feature selection using the F-test method — select_features.FTest","text":"obj feature selection specification created feature_selector(). X input data matrix. Y response variable. ... extra args (used)","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.FTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform feature selection using the F-test method — select_features.FTest","text":"logical vector indicating features retain.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.FTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform feature selection using the F-test method — select_features.FTest","text":"F-test method computes one-way ANOVA every column feature matrix.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.FTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform feature selection using the F-test method — select_features.FTest","text":"","code":"fsel <- feature_selector(\"FTest\", \"top_k\", 1000) X <- as.data.frame(matrix(rnorm(100 * 10), 100, 10)) Y <- rep(letters[1:5], 20) selected_features <- select_features(fsel, X, Y) #> selecting features via FTest #> cutoff type top_k #> cutoff value 1000 #> Warning: NAs introduced by coercion #> Warning: missing values for 'group' #> retaining 10 features in matrix with 10 columns"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.catscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform feature selection using the CATSCORE method — select_features.catscore","title":"Perform feature selection using the CATSCORE method — select_features.catscore","text":"function selects features input data matrix X using CATSCORE method provided feature selection specification.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.catscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform feature selection using the CATSCORE method — select_features.catscore","text":"","code":"# S3 method for class 'catscore' select_features(obj, X, Y, ranking.score = c(\"entropy\", \"avg\", \"max\"), ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.catscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform feature selection using the CATSCORE method — select_features.catscore","text":"obj feature selection specification created feature_selector(). X input data matrix. Y response variable. ranking.score feature score use. Supported scores \"entropy\", \"avg\", \"max\". Default \"entropy\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.catscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform feature selection using the CATSCORE method — select_features.catscore","text":"logical vector indicating features retain.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.catscore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform feature selection using the CATSCORE method — select_features.catscore","text":"CATSCORE method computes correlation adjusted t-test every column matrix using sda.ranking sda package.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.catscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform feature selection using the CATSCORE method — select_features.catscore","text":"","code":"fsel <- feature_selector(\"catscore\", \"top_k\", 1000) X <- as.data.frame(matrix(rnorm(100 * 10), 100, 10)) Y <- rep(letters[1:5], 20) selected_features <- select_features(fsel, X, Y, ranking.score = \"entropy\") #> selecting features via catscore #> retaining 10 features in matrix with 10 columns"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Features — select_features","title":"Select Features — select_features","text":"Given feature_selection specification object dataset, returns set selected features binary vector.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Features — select_features","text":"","code":"select_features(obj, X, Y, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Features — select_features","text":"obj feature_selection object specifying feature selection method parameters. X dataset containing training features. can matrix ROIVolume ROISurface object. Y dependent variable factor numeric variable. ... Additional arguments passed method-specific function.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Features — select_features","text":"logical vector indicating columns X matrix selected.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/select_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Features — select_features","text":"","code":"fsel <- feature_selector(\"FTest\", \"top_k\", 2) coords <- rbind(c(1,1,1), c(2,2,2), c(3,3,3)) ROI <- neuroim2::ROIVec(neuroim2::NeuroSpace(c(10,10,10)), coords=coords, matrix(rnorm(100*3), 100, 3)) Y <- factor(rep(c(\"a\", \"b\"), each=50)) featureMask <- select_features(fsel, neuroim2::values(ROI), Y) #> selecting features via FTest #> cutoff type top_k #> cutoff value 2 #> retaining 2 features in matrix with 3 columns sum(featureMask) == 2 #> [1] TRUE  fsel2 <- feature_selector(\"FTest\", \"top_p\", .1) featureMask <- select_features(fsel2, neuroim2::values(ROI), Y) #> selecting features via FTest #> cutoff type top_p #> cutoff value 0.1 #> retaining 1 features in matrix with 3 columns"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.binary_classification_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Binary Classification Result — sub_result.binary_classification_result","title":"Subset Binary Classification Result — sub_result.binary_classification_result","text":"function subsets binary classification result based provided indices.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.binary_classification_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Binary Classification Result — sub_result.binary_classification_result","text":"","code":"# S3 method for class 'binary_classification_result' sub_result(x, indices)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.binary_classification_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Binary Classification Result — sub_result.binary_classification_result","text":"x object class binary_classification_result containing binary classification results. indices set indices used subset results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.binary_classification_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Binary Classification Result — sub_result.binary_classification_result","text":"binary_classification_result object containing subset results specified indices.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Row-wise Subset of a Result — sub_result","title":"Extract Row-wise Subset of a Result — sub_result","text":"Extract subset rows classification/regression result object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Row-wise Subset of a Result — sub_result","text":"","code":"sub_result(x, indices)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Row-wise Subset of a Result — sub_result","text":"x input result object. indices Row indices extract.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Row-wise Subset of a Result — sub_result","text":"new result object specified rows.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.multiway_classification_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Multiway Classification Result — sub_result.multiway_classification_result","title":"Subset Multiway Classification Result — sub_result.multiway_classification_result","text":"function subsets multiway classification result based provided indices.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.multiway_classification_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Multiway Classification Result — sub_result.multiway_classification_result","text":"","code":"# S3 method for class 'multiway_classification_result' sub_result(x, indices)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.multiway_classification_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Multiway Classification Result — sub_result.multiway_classification_result","text":"x object class multiway_classification_result containing multiway classification results. indices set indices used subset results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/sub_result.multiway_classification_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Multiway Classification Result — sub_result.multiway_classification_result","text":"multiway_classification_result object containing subset results specified indices.","code":""},{"path":[]},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/summary.feature_rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for Feature RSA Model — summary.feature_rsa_model","title":"Summary Method for Feature RSA Model — summary.feature_rsa_model","text":"Summary Method Feature RSA Model","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/summary.feature_rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for Feature RSA Model — summary.feature_rsa_model","text":"","code":"# S3 method for class 'feature_rsa_model' summary(object, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/summary.feature_rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for Feature RSA Model — summary.feature_rsa_model","text":"object feature RSA model ... Additional args","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/test_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Design Extraction — test_design","title":"Test Design Extraction — test_design","text":"Return design table associated test set object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/test_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Design Extraction — test_design","text":"","code":"test_design(obj)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/test_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Design Extraction — test_design","text":"obj object extract test design table.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train Model — train_model","title":"Train Model — train_model","text":"Train classification regression model.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train Model — train_model","text":"","code":"train_model(obj, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train Model — train_model","text":"obj model specification object. ... Additional arguments passed method-specific function.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train Model — train_model","text":"trained model object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.manova_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a MANOVA Model — train_model.manova_model","title":"Train a MANOVA Model — train_model.manova_model","text":"function trains multivariate analysis variance (MANOVA) model using specified design.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.manova_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a MANOVA Model — train_model.manova_model","text":"","code":"# S3 method for class 'manova_model' train_model(obj, train_dat, y, indices, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.manova_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a MANOVA Model — train_model.manova_model","text":"obj object class manova_model. train_dat training data. y response variable indices indices training data. ... Additional arguments passed training method.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.manova_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a MANOVA Model — train_model.manova_model","text":"named numeric vector -log(p-values) predictor MANOVA model.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.mvpa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an MVPA Model — train_model.mvpa_model","title":"Train an MVPA Model — train_model.mvpa_model","text":"function trains Multi-Variate Pattern Analysis (MVPA) model provided data, taking care feature selection, parameter tuning, model fitting.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.mvpa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an MVPA Model — train_model.mvpa_model","text":"","code":"# S3 method for class 'mvpa_model' train_model(obj, train_dat, y, indices, wts = NULL, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.mvpa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an MVPA Model — train_model.mvpa_model","text":"obj object class mvpa_model, specifying MVPA problem. train_dat Training data, instance class ROIVolume ROISurface. y dependent variable (response variable), either numeric vector factor. indices spatial indices associated column. wts Optional class weights (underlying model supports ). ... Additional arguments passed methods.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.mvpa_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an MVPA Model — train_model.mvpa_model","text":"model fit object containing trained model, fit, model type (classification regression), best tuning parameters, voxel indices, feature mask.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an RSA Model — train_model.rsa_model","title":"Train an RSA Model — train_model.rsa_model","text":"function trains RSA (representational similarity analysis) model using specified method distance calculation.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an RSA Model — train_model.rsa_model","text":"","code":"# S3 method for class 'rsa_model' train_model(obj, train_dat, y, indices, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an RSA Model — train_model.rsa_model","text":"obj object class rsa_model. train_dat training data. y response variable. indices indices training data. ... Additional arguments passed training method.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.rsa_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an RSA Model — train_model.rsa_model","text":"trained model.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.vector_rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a vector RSA model — train_model.vector_rsa_model","title":"Train a vector RSA model — train_model.vector_rsa_model","text":"Train vector RSA model","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.vector_rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a vector RSA model — train_model.vector_rsa_model","text":"","code":"# S3 method for class 'vector_rsa_model' train_model(obj, train_dat, y, indices, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.vector_rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a vector RSA model — train_model.vector_rsa_model","text":"obj object class vector_rsa_model. train_dat data frame matrix representing training subset (e.g., voxel intensities). y used vector RSA (consistency train_model generics). indices spatial indices training data (ROI, searchlight, etc.). ... Additional arguments.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/train_model.vector_rsa_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a vector RSA model — train_model.vector_rsa_model","text":"structure containing \"scores\" similar second-order similarity results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/tune_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune Grid Extraction — tune_grid","title":"Tune Grid Extraction — tune_grid","text":"Extract parameter grid optimize model.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/tune_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune Grid Extraction — tune_grid","text":"","code":"tune_grid(obj, x, y, len)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/tune_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune Grid Extraction — tune_grid","text":"obj model object. x training data. y response vector. len number elements tuning grid.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/twofold_blocked_cross_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"twofold_blocked_cross_validation — twofold_blocked_cross_validation","title":"twofold_blocked_cross_validation — twofold_blocked_cross_validation","text":"Construct cross-validation specification randomly partitions input set two sets blocks.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/twofold_blocked_cross_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"twofold_blocked_cross_validation — twofold_blocked_cross_validation","text":"","code":"twofold_blocked_cross_validation(block_var, nreps = 10)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/twofold_blocked_cross_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"twofold_blocked_cross_validation — twofold_blocked_cross_validation","text":"block_var integer vector representing cross-validation blocks. block indicated unique integer. nreps integer specifying number repetitions twofold split.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/twofold_blocked_cross_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"twofold_blocked_cross_validation — twofold_blocked_cross_validation","text":"object class \"twofold_blocked_cross_validation\", \"cross_validation\", \"list\" containing block_var,   nfolds (fixed 2 function), nreps, block_ind.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/twofold_blocked_cross_validation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"twofold_blocked_cross_validation — twofold_blocked_cross_validation","text":"function creates cross-validation scheme cases data organized blocks, blocks divided two groups evaluation. approach can useful inherent structure dependency within blocks, separating can help avoid biased estimates model performance. returns object class \"twofold_blocked_cross_validation\", \"cross_validation\", \"list\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/twofold_blocked_cross_validation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"twofold_blocked_cross_validation — twofold_blocked_cross_validation","text":"","code":"blockvar <- rep(1:5, each=10) nreps <- 5 cval <- twofold_blocked_cross_validation(blockvar, nreps=nreps) samples <- crossval_samples(cval, as.data.frame(matrix(rnorm(50*50),50,50)), y=rep(letters[1:5],10)) stopifnot(nrow(samples) == nreps)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/vector_rsa_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a design for a vectorized RSA model — vector_rsa_design","title":"Construct a design for a vectorized RSA model — vector_rsa_design","text":"function constructs design RSA model using single distance matrix, labels, blocks.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/vector_rsa_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a design for a vectorized RSA model — vector_rsa_design","text":"","code":"vector_rsa_design(D, labels, block_var)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/vector_rsa_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a design for a vectorized RSA model — vector_rsa_design","text":"D representational dissimilarity matrix row.names indicating labels. labels character vector labels corresponding rows another dataset X. block_var vector indicating block (strata) label belongs . Must length `labels`.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/vector_rsa_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a design for a vectorized RSA model — vector_rsa_design","text":"list containing elements RSA design, class attributes \"vector_rsa_design\" \"list\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/vector_rsa_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a design for a vectorized RSA model — vector_rsa_design","text":"function verifies `labels` appear `rownames(D)`. also creates expanded version dissimilarity matrix (`Dexpanded`) matching order `labels`, precomputes cross-block information later use.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/vector_rsa_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vectorized RSA model — vector_rsa_model","title":"Create a vectorized RSA model — vector_rsa_model","text":"function integrates vector_rsa_design mvpa_dataset create vectorized RSA model.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/vector_rsa_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vectorized RSA model — vector_rsa_model","text":"","code":"vector_rsa_model(   dataset,   design,   distfun = cordist(),   rsa_simfun = c(\"pearson\", \"spearman\") )"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/vector_rsa_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vectorized RSA model — vector_rsa_model","text":"dataset mvpa_dataset object. design vector_rsa_design object. distfun distfun (distance function) computing pairwise dissimilarities among image rows. rsa_simfun character string specifying similarity function use RSA, one \"pearson\" \"spearman\".","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/vector_rsa_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vectorized RSA model — vector_rsa_model","text":"vector_rsa_model object (S3 class) containing references dataset, design, function parameters.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/vector_rsa_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a vectorized RSA model — vector_rsa_model","text":"model references already-precomputed cross-block data design.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/wrap_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap output results — wrap_out","title":"Wrap output results — wrap_out","text":"function wraps output results performance matrix list SparseNeuroVec objects column performance matrix.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/wrap_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap output results — wrap_out","text":"","code":"wrap_out(perf_mat, dataset, ids = NULL)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/wrap_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap output results — wrap_out","text":"perf_mat performance matrix containing classifier results. dataset dataset object containing dataset information. ids optional vector voxel IDs.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/wrap_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap output results — wrap_out","text":"named list SparseNeuroVec objects representing wrapped output results.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/wrap_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap Output — wrap_output","title":"Wrap Output — wrap_output","text":"Wrap output values desired format.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/wrap_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap Output — wrap_output","text":"","code":"wrap_output(obj, vals, ...)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/wrap_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap Output — wrap_output","text":"obj object used determine wrapping method. vals values wrapped. ... Additional arguments passed methods.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/wrap_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap Output — wrap_output","text":"wrapped output object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/y_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Labels/Response Extraction — y_test","title":"Test Labels/Response Extraction — y_test","text":"Extract test labels response variable object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/y_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Labels/Response Extraction — y_test","text":"","code":"y_test(obj)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/y_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Labels/Response Extraction — y_test","text":"obj object extract test response variable.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/y_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Training Labels/Response Extraction — y_train","title":"Training Labels/Response Extraction — y_train","text":"Extract training labels response variable object.","code":""},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/y_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training Labels/Response Extraction — y_train","text":"","code":"y_train(obj)"},{"path":"http://bbuchsbaum.github.io/rMVPA/reference/y_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Training Labels/Response Extraction — y_train","text":"obj object extract training response variable.","code":""}]
