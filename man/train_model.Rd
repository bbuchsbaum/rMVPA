% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allgeneric.R, R/manova_model.R,
%   R/model_fit.R, R/rsa_model.R, R/vector_rsa_model.R, R/feature_rsa_model.R,
%   R/contrast_rsa_model.R
\name{train_model}
\alias{train_model}
\alias{train_model.manova_model}
\alias{train_model.mvpa_model}
\alias{train_model.rsa_model}
\alias{train_model.vector_rsa_model}
\alias{train_model.feature_rsa_model}
\alias{train_model.contrast_rsa_model}
\title{Train a classification, regression, or representational model.}
\usage{
train_model(obj, ...)

\method{train_model}{manova_model}(obj, train_dat, y, indices, ...)

\method{train_model}{mvpa_model}(obj, train_dat, y, indices, wts = NULL, ...)

\method{train_model}{rsa_model}(obj, train_dat, y, indices, ...)

\method{train_model}{vector_rsa_model}(obj, train_dat, y, indices, ...)

\method{train_model}{feature_rsa_model}(obj, X, y, indices, ...)

\method{train_model}{contrast_rsa_model}(obj, sl_data, sl_info, cv_spec, ...)
}
\arguments{
\item{obj}{An object of class \code{contrast_rsa_model}.}

\item{...}{Additional arguments (currently ignored).}

\item{train_dat}{A data frame or matrix representing the training subset (e.g., voxel intensities).}

\item{y}{Feature matrix used for RSA (samples x features).}

\item{indices}{Spatial indices associated with the training data.}

\item{wts}{Optional class weights (if the underlying model supports it).}

\item{X}{Brain data (samples x voxels).}

\item{sl_data}{The data matrix for the current searchlight (samples x voxels).}

\item{sl_info}{A list containing information about the current searchlight, including \code{center_local_id}.}

\item{cv_spec}{The cross-validation specification.}
}
\value{
A trained model object. The exact return value depends on the specific
  method implementation.

A named numeric vector of -log(p-values) for each predictor in the MANOVA model.

A model fit object containing the trained model, its fit, the model type (classification or regression), the best tuning parameters, the voxel indices, and the feature mask.

Depending on \code{obj$regtype}:
\itemize{
  \item \code{"lm"} + no constraints + \code{obj$semipartial=TRUE}: semi-partial correlations
  \item \code{"lm"} + no constraints + \code{obj$semipartial=FALSE}: T-values of each predictor
  \item \code{"lm"} + \code{nneg} constraints: raw coefficients from constrained \code{glmnet}
  \item \code{"rfit"}: robust regression coefficients
  \item \code{"pearson"} or \code{"spearman"}: correlation coefficients
}

A structure containing "scores" or similar second-order similarity results.

A list containing RSA metrics and, if requested, permutation results.

A named list where each element corresponds to a requested `output_metric` from the `obj$output_metric` vector.
  Each element is:
  \itemize{
    \item For metrics like "beta_delta", "beta_only", "delta_only": A Q-length named vector where
          values are indexed by contrast and names match the contrast_matrix column names (Q = number of contrasts)
    \item For metrics like "recon_score", "composite": A single numeric value
  }
  The list will have an attribute "na_reason" if any metric calculation failed, which can be used for diagnostics.
  
  For example, if `obj$output_metric = c("beta_delta", "recon_score")`, the returned list will have 
  two elements: `$beta_delta` (a Q-length vector) and `$recon_score` (a single value).

A named list where each element corresponds to a requested metric from \code{obj$output_metric}.
}
\description{
This is a generic function that trains a model based on the provided
model specification object. Different model types will have different
methods implemented with specific parameters.

This function trains a multivariate analysis of variance (MANOVA) model using the specified design.

This function implements the core logic for the MS-ReVE analysis within a single
searchlight or region.
}
\examples{
\donttest{
  # Generate a small sample dataset for classification
  dset_info <- gen_sample_dataset(
    D = c(8, 8, 8),
    nobs = 20,
    response_type = "categorical",
    data_mode = "image",
    nlevels = 2
  )

  # Create a cross-validation specification
  cval <- blocked_cross_validation(dset_info$design$block_var)

  # Load a simple classifier
  sda_model <- load_model("sda_notune")

  # Create an MVPA model specification
  mspec <- mvpa_model(
    model = sda_model,
    dataset = dset_info$dataset,
    design = dset_info$design,
    model_type = "classification",
    crossval = cval
  )

  # Train the model
  fit <- train_model(
    mspec,
    dset_info$dataset$train_data,
    dset_info$design$y_train,
    indices = seq_len(ncol(dset_info$dataset$train_data))
  )
}
# This example shows the structure of the returned list but doesn't actually run the function
# For a multi-metric model: output_metric = c("beta_delta", "recon_score", "beta_only")
}
\keyword{internal}
