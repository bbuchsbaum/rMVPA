% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rsa_model.R
\name{rsa_model}
\alias{rsa_model}
\title{Construct an RSA (Representational Similarity Analysis) model}
\usage{
rsa_model(
  dataset,
  design,
  distmethod = "spearman",
  regtype = "pearson",
  check_collinearity = TRUE,
  nneg = NULL,
  semipartial = FALSE
)
}
\arguments{
\item{dataset}{An instance of an \code{mvpa_dataset}.}

\item{design}{An instance of an \code{rsa_design} created by \code{rsa_design()}.}

\item{distmethod}{A character string specifying the method used to compute distances between observations. 
One of: \code{"pearson"} or \code{"spearman"} (defaults to "spearman").}

\item{regtype}{A character string specifying the analysis method. 
One of: \code{"pearson"}, \code{"spearman"}, \code{"lm"}, or \code{"rfit"} (defaults to "pearson").}

\item{check_collinearity}{Logical indicating whether to check for collinearity in the design matrix. 
Only applies when \code{regtype="lm"}. Default is TRUE.}

\item{nneg}{A named list of variables (predictors) for which non-negative regression coefficients should be enforced 
(only if \code{regtype="lm"}). Defaults to \code{NULL} (no constraints).}

\item{semipartial}{Logical indicating whether to compute semi-partial correlations in the \code{"lm"} case 
(only if \code{nneg} is not used). Defaults to \code{FALSE}.}
}
\value{
An object of class \code{"rsa_model"} (and \code{"list"}), containing:
\itemize{
  \item \code{dataset}    : the input dataset
  \item \code{design}     : the RSA design
  \item \code{distmethod} : the distance method used
  \item \code{regtype}    : the regression type
  \item \code{nneg}       : a named list of constrained variables, if any
  \item \code{semipartial}: whether to compute semi-partial correlations
}
}
\description{
This function creates an RSA model object by taking an MVPA (Multi-Variate Pattern Analysis) dataset and an RSA design.
}
\examples{
# Create a random MVPA dataset
data <- matrix(rnorm(100 * 100), 100, 100)
labels <- factor(rep(1:2, each = 50))
mvpa_data <- mvpa_dataset(data, labels)

# Create an RSA design with two distance matrices
dismat1 <- dist(data)
dismat2 <- dist(matrix(rnorm(100*100), 100, 100))
rdes <- rsa_design(~ dismat1 + dismat2, list(dismat1=dismat1, dismat2=dismat2))

# Create an RSA model with standard 'lm' (returns t-values):
rsa_mod <- rsa_model(mvpa_data, rdes, regtype="lm")

# Create an RSA model enforcing non-negativity for dismat2 only:
# Requires the 'glmnet' package to be installed
# rsa_mod_nneg <- rsa_model(mvpa_data, rdes, regtype="lm",
#                          nneg = list(dismat2 = TRUE))

# Create an RSA model using 'lm' but returning semi-partial correlations:
rsa_mod_sp <- rsa_model(mvpa_data, rdes, regtype="lm",
                        semipartial = TRUE)

# Train the model
fit_params <- train_model(rsa_mod_sp, mvpa_data$train_data)
# 'fit_params' = named vector of semi-partial correlations for each predictor

}
