% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mvpa_model.R
\name{mvpa_model}
\alias{mvpa_model}
\title{create an mvpa_model}
\usage{
mvpa_model(
  model,
  dataset,
  design,
  model_type = c("classification", "regression"),
  crossval = NULL,
  feature_selector = NULL,
  tune_grid = NULL,
  tune_reps = 15,
  performance = NULL,
  class_metrics = TRUE
)
}
\arguments{
\item{model}{a caret-based classification or regression model}

\item{dataset}{a \code{mvpa_dataset} instance}

\item{design}{a \code{mvpa_design} instance}

\item{model_type}{a \code{character} string indicating problem type: 'classification' or 'regression'}

\item{crossval}{a \code{cross_validation} instance}

\item{feature_selector}{an optional \code{feature_selector} instance}

\item{tune_grid}{an optional parameter tuning grid as a \code{data.frame}}

\item{tune_reps}{the number of replications used during paramter tuning. Only relevant if \code{tune_grid} supplied.}

\item{performance}{an optional custom function for computing performance metrics.}

\item{class_metrics}{\code{logical} flag indicating whether to compute performance metrics for each class.}
}
\description{
create an mvpa_model
}
\details{
if \code{performance} is supplied it must be a function that takes one argument and 
returns a named list of scalar values. The argument the function takes is a class deriving from
\code{classification_result} appropriate for the problem at hand. See example below.
}
\examples{

mod <- load_model("sda")
traindat <- neuroim2::NeuroVec(array(rnorm(6*6*6*100), c(6,6,6,100)), neuroim2::NeuroSpace(c(6,6,6,100)))
mask <- neuroim2::LogicalNeuroVol(array(rnorm(6*6*6)>-.2, c(6,6,6)), neuroim2::NeuroSpace(c(6,6,6)))

mvdset <- mvpa_dataset(traindat,mask=mask)
design <- data.frame(fac=rep(letters[1:4], 25), block=rep(1:10, each=10))
cval <- blocked_cross_validation(design$block)
mvdes <- mvpa_design(design, ~ fac, block_var=~block)

custom_perf <- function(result) {
   c(accuracy=sum(result$observed == result$predicted)/length(result$observed))
}
mvpmod <- mvpa_model(mod,dataset=mvdset, design=mvdes,crossval=cval, performance=custom_perf)
ret <- run_searchlight(mvpmod)
stopifnot("accuracy" \%in\% names(ret))
}
